/**
 * D3 Force Network Chart - v3.0.0 - 2018-11-26
 * https://github.com/ogobrecht/d3-force-apex-plugin
 * Copyright (c) 2015-2018 Ottmar Gobrecht - MIT license
 */

// <script type="text/javascript" src="tree2_data.js"> </script>

function netGobrechtsD3Force(data2, t, e, o, n) {
    "use strict";
	console.log(data2);
    var p = {
        conf: {},
        confDefaults: {},
        data: {},
        dom: {},
        events: {},
        lib: {},
        main: {},
        status: {},
        tools: {},
        version: "3.0.0"
    }, g = {};
    return p.main.init = function () {
        p.dom.containerId = t || "D3Force" + Math.floor(1e6 * Math.random()), p.confUser = e || {}, p.status.apexPluginId = o, p.status.apexPageItemsToSubmit = !(!n || "" === n) && n.replace(/\s/g, "").split(","), p.main.setupConfiguration(), p.main.setupDom(), p.main.setupFunctionReferences()
    },
        p.main.setupConfiguration = function () {
            p.conf.debug = p.status.apexPluginId && 1 === apex.jQuery("#pdebug").length, p.status.debugPrefix = "D3 Force in DOM container #" + p.dom.containerId + ": ", p.status.customize = !1, p.status.customizeCurrentMenu = "nodes", p.status.customizeCurrentTabPosition = null, p.status.forceTickCounter = 0, p.status.forceStartTime = 0, p.status.forceRunning = !1, p.status.graphStarted = !1, p.status.graphRendering = !1, p.status.graphReady = !1, p.status.graphOldPositions = null, p.status.sampleData = !1, p.status.wrapLabelsOnNextTick = !1, p.status.labelFontSize = null, p.status.resizeTriggered = !1, p.confDefaults.minNodeRadius = {
                display: !0,
                relation: "node",
                type: "number",
                val: 6,
                options: [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
            }, p.confDefaults.maxNodeRadius = {
                display: !0,
                relation: "node",
                type: "number",
                val: 18,
                options: [36, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12]
            }, p.confDefaults.colorScheme = {
                display: !0,
                relation: "node",
                type: "text",
                val: "color20",
                options: ["color20", "color20b", "color20c", "color10", "direct"]
            }, p.confDefaults.dragMode = {
                display: !0,
                relation: "node",
                type: "bool",
                val: !0,
                options: [!0, !1]
            }, p.confDefaults.pinMode = {
                display: !0,
                relation: "node",
                type: "bool",
                val: !1,
                options: [!0, !1]
            }, p.confDefaults.nodeEventToStopPinMode = {
                display: !0,
                relation: "node",
                type: "text",
                val: "contextmenu",
                options: ["none", "dblclick", "contextmenu"]
            }, p.confDefaults.onNodeContextmenuPreventDefault = {
                display: !0,
                relation: "node",
                type: "bool",
                val: !1,
                options: [!0, !1]
            }, p.confDefaults.nodeEventToOpenLink = {
                display: !0,
                relation: "node",
                type: "text",
                val: "dblclick",
                options: ["none", "click", "dblclick", "contextmenu"]
            }, p.confDefaults.nodeLinkTarget = {
                display: !0,
                relation: "node",
                type: "text",
                val: "_blank",
                options: ["none", "_blank", "nodeID", "domContainerID"]
            }, p.confDefaults.showLabels = {
                display: !0,
                relation: "label",
                type: "bool",
                val: !0,
                options: [!0, !1]
            }, p.confDefaults.wrapLabels = {
                display: !0,
                relation: "label",
                type: "bool",
                val: !1,
                options: [!0, !1]
            }, p.confDefaults.labelSplitCharacter = {
                display: !0,
                relation: "label",
                type: "text",
                val: "none",
                options: ["none", "^", "`", "Â°", "\\", "|", "/", "#", ":", "::"]
            }, p.confDefaults.wrappedLabelWidth = {
                display: !0,
                relation: "label",
                type: "number",
                val: 80,
                options: [200, 190, 180, 170, 160, 150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40]
            }, p.confDefaults.wrappedLabelLineHeight = {
                display: !0,
                relation: "label",
                type: "number",
                val: 1.2,
                options: [1.5, 1.4, 1.3, 1.2, 1.1, 1]
            }, p.confDefaults.labelsCircular = {
                display: !0,
                relation: "label",
                type: "bool",
                val: !1,
                options: [!0, !1]
            }, p.confDefaults.labelDistance = {
                display: !0,
                relation: "label",
                type: "number",
                val: 12,
                options: [30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2]
            }, p.confDefaults.preventLabelOverlappingOnForceEnd = {
                display: !0,
                relation: "label",
                type: "bool",
                val: !1,
                options: [!0, !1]
            }, p.confDefaults.labelPlacementIterations = {
                display: !0,
                relation: "label",
                type: "number",
                val: 250,
                options: [2e3, 1e3, 500, 250, 125]
            }, p.confDefaults.showTooltips = {
                display: !0,
                relation: "node",
                type: "bool",
                val: !0,
                options: [!0, !1]
            }, p.confDefaults.tooltipPosition = {
                display: !0,
                relation: "node",
                type: "text",
                val: "svgTopRight",
                options: ["node", "svgTopLeft", "svgTopRight"]
            }, p.confDefaults.alignFixedNodesToGrid = {
                display: !0,
                relation: "node",
                type: "bool",
                val: !1,
                options: [!0, !1]
            }, p.confDefaults.gridSize = {
                display: !0,
                relation: "node",
                type: "number",
                val: 50,
                options: [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]
            }, p.confDefaults.linkDistance = {
                display: !0,
                relation: "link",
                type: "number",
                val: 80,
                options: [120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20]
            }, p.confDefaults.showLinkDirection = {
                display: !0,
                relation: "link",
                type: "bool",
                val: !0,
                options: [!0, !1]
            }, p.confDefaults.showSelfLinks = {
                display: !0,
                relation: "link",
                type: "bool",
                val: !0,
                options: [!0, !1]
            }, p.confDefaults.selfLinkDistance = {
                display: !0,
                relation: "link",
                type: "number",
                val: 20,
                options: [30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8]
            }, p.confDefaults.useDomParentWidth = {
                display: !0,
                relation: "graph",
                type: "bool",
                val: !1,
                options: [!0, !1]
            }, p.confDefaults.width = {
                display: !0,
                relation: "graph",
                type: "number",
                val: 600,
                options: [1200, 1150, 1100, 1050, 1e3, 950, 900, 850, 800, 750, 700, 650, 600, 550, 500, 450, 400, 350, 300]
            }, p.confDefaults.height = {
                display: !0,
                relation: "graph",
                type: "number",
                val: 400,
                options: [1200, 1150, 1100, 1050, 1e3, 950, 900, 850, 800, 750, 700, 650, 600, 550, 500, 450, 400, 350, 300]
            }, p.confDefaults.setDomParentPaddingToZero = {
                display: !0,
                relation: "graph",
                type: "bool",
                val: !1,
                options: [!0, !1]
            }, p.confDefaults.showBorder = {
                display: !0,
                relation: "graph",
                type: "bool",
                val: !0,
                options: [!0, !1]
            }, p.confDefaults.showLegend = {
                display: !0,
                relation: "graph",
                type: "bool",
                val: !0,
                options: [!0, !1]
            }, p.confDefaults.showLoadingIndicatorOnAjaxCall = {
                display: !0,
                relation: "graph",
                type: "bool",
                val: !0,
                options: [!0, !1]
            }, p.confDefaults.lassoMode = {
                display: !0,
                relation: "graph",
                type: "bool",
                val: !1,
                options: [!0, !1]
            }, p.confDefaults.zoomMode = {
                display: !0,
                relation: "graph",
                type: "bool",
                val: !1,
                options: [!0, !1]
            }, p.confDefaults.minZoomFactor = {
                display: !0,
                relation: "graph",
                type: "number",
                val: .2,
                options: [1, .9, .8, .7, .6, .5, .4, .3, .2, .1]
            }, p.confDefaults.maxZoomFactor = {
                display: !0,
                relation: "graph",
                type: "number",
                val: 5,
                options: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
            }, p.confDefaults.transform = {
                display: !1,
                relation: "graph",
                type: "object",
                val: {translate: [0, 0], scale: 1}
            }, p.confDefaults.zoomToFitOnForceEnd = {
                display: !0,
                relation: "graph",
                type: "bool",
                val: !0,
                options: [!0, !1]
            }, p.confDefaults.zoomToFitOnResize = {
                display: !0,
                relation: "graph",
                type: "bool",
                val: !0,
                options: [!0, !1]
            }, p.confDefaults.keepAspectRatioOnResize = {
                display: !0,
                relation: "graph",
                type: "bool",
                val: !0,
                options: [!0, !1]
            }, p.confDefaults.onResizeFunctionTimeout = {
                display: !0,
                relation: "graph",
                type: "number",
                val: 300,
                options: [1e3, 900, 800, 700, 600, 500, 400, 300, 200, 100, 0]
            }, p.confDefaults.autoRefresh = {
                display: !0,
                relation: "graph",
                type: "bool",
                val: !1,
                options: [!0, !1]
            }, p.confDefaults.refreshInterval = {
                display: !0,
                relation: "graph",
                type: "number",
                val: 5e3,
                options: [6e4, 3e4, 15e3, 1e4, 5e3, 2500]
            }, p.confDefaults.chargeDistance = {
                display: !1,
                relation: "graph",
                type: "number",
                val: 1 / 0,
                options: [1 / 0, 25600, 12800, 6400, 3200, 1600, 800, 400, 200, 100],
                internal: !0
            }, p.confDefaults.charge = {
                display: !0,
                relation: "graph",
                type: "number",
                val: -350,
                options: [-1e3, -950, -900, -850, -800, -750, -700, -650, -600, -550, -500, -450, -400, -350, -300, -250, -200, -150, -100, -50, 0],
                internal: !0
            }, p.confDefaults.gravity = {
                display: !0,
                relation: "graph",
                type: "number",
                val: .1,
                options: [1, .95, .9, .85, .8, .75, .7, .65, .6, .55, .5, .45, .4, .35, .3, .25, .2, .15, .1, .05, 0],
                internal: !0
            }, p.confDefaults.linkStrength = {
                display: !0,
                relation: "graph",
                type: "number",
                val: 1,
                options: [1, .95, .9, .85, .8, .75, .7, .65, .6, .55, .5, .45, .4, .35, .3, .25, .2, .15, .1, .05, 0],
                internal: !0
            }, p.confDefaults.friction = {
                display: !0,
                relation: "graph",
                type: "number",
                val: .9,
                options: [1, .95, .9, .85, .8, .75, .7, .65, .6, .55, .5, .45, .4, .35, .3, .25, .2, .15, .1, .05, 0],
                internal: !0
            }, p.confDefaults.theta = {
                display: !0,
                relation: "graph",
                type: "number",
                val: .8,
                options: [1, .95, .9, .85, .8, .75, .7, .65, .6, .55, .5, .45, .4, .35, .3, .25, .2, .15, .1, .05, 0],
                internal: !0
            }, p.conf.debug = void 0 !== p.confUser.debug && p.tools.parseBool(p.confUser.debug),
                p.conf.minNodeRadius = p.confUser.minNodeRadius || p.confDefaults.minNodeRadius.val, p.conf.maxNodeRadius = p.confUser.maxNodeRadius || p.confDefaults.maxNodeRadius.val, p.conf.colorScheme = p.confUser.colorScheme || p.confDefaults.colorScheme.val, p.conf.dragMode = void 0 !== p.confUser.dragMode ? p.tools.parseBool(p.confUser.dragMode) : p.confDefaults.dragMode.val, p.conf.pinMode = void 0 !== p.confUser.pinMode ? p.tools.parseBool(p.confUser.pinMode) : p.confDefaults.pinMode.val, p.conf.nodeEventToStopPinMode = p.confUser.nodeEventToStopPinMode || p.confDefaults.nodeEventToStopPinMode.val, p.conf.onNodeContextmenuPreventDefault = void 0 !== p.confUser.onNodeContextmenuPreventDefault ? p.tools.parseBool(p.confUser.onNodeContextmenuPreventDefault) : p.confDefaults.onNodeContextmenuPreventDefault.val, p.conf.nodeEventToOpenLink = p.confUser.nodeEventToOpenLink
                || p.confDefaults.nodeEventToOpenLink.val, p.conf.nodeLinkTarget = p.confUser.nodeLinkTarget
                || p.confDefaults.nodeLinkTarget.val, p.conf.showLabels = void
                0 !== p.confUser.showLabels ? p.tools.parseBool(p.confUser.showLabels) : p.confDefaults.showLabels.val, p.conf.wrapLabels = void
                0 !== p.confUser.wrapLabels ? p.tools.parseBool(p.confUser.wrapLabels) : p.confDefaults.wrapLabels.val, p.conf.labelSplitCharacter = p.confUser.labelSplitCharacter || p.confDefaults.labelSplitCharacter.val, p.conf.wrappedLabelWidth = p.confUser.wrappedLabelWidth
                || p.confDefaults.wrappedLabelWidth.val, p.conf.wrappedLabelLineHeight = p.confUser.wrappedLabelLineHeight
                || p.confDefaults.wrappedLabelLineHeight.val, p.conf.labelsCircular = void
                0 !== p.confUser.labelsCircular ? p.tools.parseBool(p.confUser.labelsCircular) : p.confDefaults.labelsCircular.val, p.conf.labelDistance = p.confUser.labelDistance || p.confDefaults.labelDistance.val, p.conf.preventLabelOverlappingOnForceEnd = void
                0 !== p.confUser.preventLabelOverlappingOnForceEnd ? p.tools.parseBool(p.confUser.preventLabelOverlappingOnForceEnd) : p.confDefaults.preventLabelOverlappingOnForceEnd.val, p.conf.labelPlacementIterations = p.confUser.labelPlacementIterations
                || p.confDefaults.labelPlacementIterations.val, p.conf.showTooltips = void
                0 !== p.confUser.showTooltips ? p.tools.parseBool(p.confUser.showTooltips) : p.confDefaults.showTooltips.val, p.conf.tooltipPosition = p.confUser.tooltipPosition
                || p.confDefaults.tooltipPosition.val, p.conf.alignFixedNodesToGrid = void
                0 !== p.confUser.alignFixedNodesToGrid ? p.tools.parseBool(p.confUser.alignFixedNodesToGrid) : p.confDefaults.alignFixedNodesToGrid.val, p.conf.gridSize = p.confUser.gridSize && 0 < p.confUser.gridSize ? p.confUser.gridSize : p.confDefaults.gridSize.val, p.conf.linkDistance = p.confUser.linkDistance
                || p.confDefaults.linkDistance.val, p.conf.showLinkDirection = void
                0 !== p.confUser.showLinkDirection ? p.tools.parseBool(p.confUser.showLinkDirection) : p.confDefaults.showLinkDirection.val, p.conf.showSelfLinks = void
                0 !== p.confUser.showSelfLinks ? p.tools.parseBool(p.confUser.showSelfLinks) : p.confDefaults.showSelfLinks.val,
                p.conf.selfLinkDistance = p.confUser.selfLinkDistance || p.confDefaults.selfLinkDistance.val,
                p.conf.useDomParentWidth = void 0 !== p.confUser.useDomParentWidth ? p.tools.parseBool(p.confUser.useDomParentWidth) : p.confDefaults.useDomParentWidth.val, p.conf.width = p.confUser.width
                || p.confDefaults.width.val, p.conf.height = p.confUser.height
                || p.confDefaults.height.val, p.conf.setDomParentPaddingToZero = void
                0 !== p.confUser.setDomParentPaddingToZero ? p.tools.parseBool(p.confUser.setDomParentPaddingToZero) : p.confDefaults.setDomParentPaddingToZero.val, p.conf.showBorder = void 0 !== p.confUser.showBorder ? p.tools.parseBool(p.confUser.showBorder) : p.confDefaults.showBorder.val, p.conf.showLegend = void
                0 !== p.confUser.showLegend ? p.tools.parseBool(p.confUser.showLegend) : p.confDefaults.showLegend.val, p.conf.showLoadingIndicatorOnAjaxCall = void
                0 !== p.confUser.showLoadingIndicatorOnAjaxCall ? p.tools.parseBool(p.confUser.showLoadingIndicatorOnAjaxCall) : p.confDefaults.showLoadingIndicatorOnAjaxCall.val, p.conf.lassoMode = void 0 !== p.confUser.lassoMode ? p.tools.parseBool(p.confUser.lassoMode) : p.confDefaults.lassoMode.val,p.conf.zoomMode = void
                0 !== p.confUser.zoomMode ? p.tools.parseBool(p.confUser.zoomMode) : p.confDefaults.zoomMode.val,p.conf.minZoomFactor = p.confUser.minZoomFactor || p.confDefaults.minZoomFactor.val,p.conf.maxZoomFactor = p.confUser.maxZoomFactor || p.confDefaults.maxZoomFactor.val,p.conf.transform = p.confUser.transform || p.confDefaults.transform.val,p.conf.zoomToFitOnForceEnd = void 0 !== p.confUser.zoomToFitOnForceEnd ? p.tools.parseBool(p.confUser.zoomToFitOnForceEnd) : p.confDefaults.zoomToFitOnForceEnd.val,p.conf.zoomToFitOnResize = void 0 !== p.confUser.zoomToFitOnResize ? p.tools.parseBool(p.confUser.zoomToFitOnResize) : p.confDefaults.zoomToFitOnResize.val,p.conf.keepAspectRatioOnResize = void 0 !== p.confUser.keepAspectRatioOnResize ? p.tools.parseBool(p.confUser.keepAspectRatioOnResize) : p.confDefaults.keepAspectRatioOnResize.val,p.conf.onResizeFunctionTimeout = p.confUser.onResizeFunctionTimeout || p.confDefaults.onResizeFunctionTimeout.val,p.conf.autoRefresh = void 0 !== p.confUser.autoRefresh ? p.tools.parseBool(p.confUser.autoRefresh) : p.confDefaults.autoRefresh.val,p.conf.refreshInterval = p.confUser.refreshInterval || p.confDefaults.refreshInterval.val,p.conf.chargeDistance = p.confUser.chargeDistance || 1 / 0,p.conf.charge = p.confUser.charge || p.confDefaults.charge.val,p.conf.gravity = p.confUser.gravity || p.confDefaults.gravity.val,p.conf.linkStrength = p.confUser.linkStrength || p.confDefaults.linkStrength.val,p.conf.friction = p.confUser.friction || p.confDefaults.friction.val,p.conf.theta = p.confUser.theta || p.confDefaults.theta.val,p.conf.onNodeMouseenterFunction = p.confUser.onNodeMouseenterFunction || null,p.conf.onNodeMouseleaveFunction = p.confUser.onNodeMouseleaveFunction || null,p.conf.onNodeClickFunction = p.confUser.onNodeClickFunction || null,p.conf.onNodeDblclickFunction = p.confUser.onNodeDblclickFunction || null,p.conf.onNodeContextmenuFunction = p.confUser.onNodeContextmenuFunction || null,p.conf.onLinkClickFunction = p.confUser.onLinkClickFunction || null,p.conf.onLassoStartFunction = p.confUser.onLassoStartFunction || null,p.conf.onLassoEndFunction = p.confUser.onLassoEndFunction || null,p.conf.onRenderEndFunction = p.confUser.onRenderEndFunction || null,p.conf.onForceStartFunction = p.confUser.onForceStartFunction || null,p.conf.onForceEndFunction = p.confUser.onForceEndFunction
                || null,
            p.conf.onResizeFunction = p.confUser.onResizeFunction || null,




            p.data.sampleData =data2,










                p.status.userAgent = navigator.userAgent, p.status.userAgentIe9To11 = !1, (-1 !== navigator.appVersion.indexOf("MSIE 9") || -1 !== navigator.appVersion.indexOf("MSIE 10") || -1 !== p.status.userAgent.indexOf("Trident") && -1 !== p.status.userAgent.indexOf("rv:11")) && (p.status.userAgentIe9To11 = !0, p.tools.logError("Houston, we have a problem - user agent is IE 9, 10 or 11 - we have to provide a fix for markers: http://stackoverflow.com/questions/15588478/internet-explorer-10-not-showing-svg-path-d3-js-graph"))
        }, p.main.setupDom = function () {
        var t, e;
        p.dom.body = d3.select("body"), null === document.querySelector("#" + p.dom.containerId) ? p.dom.container = p.dom.body.append("div").attr("id", p.dom.containerId) : (p.dom.container = d3.select("#" + p.dom.containerId), d3.selectAll("#" + p.dom.containerId + "_tooltip, #" + p.dom.containerId + "_customizing").remove()),
            null === document.querySelector("#" + p.dom.containerId + " svg") ? p.dom.svg = p.dom.container.append("svg") : (p.dom.svg = d3.select("#" + p.dom.containerId + " svg"), d3.selectAll("#" + p.dom.containerId + " svg *").remove()), p.dom.svgParent = d3.select(p.dom.svg.node().parentNode), p.conf.setDomParentPaddingToZero && p.dom.svgParent.style("padding", "0"), t = p.tools.getGraphWidth(), e = p.tools.getGraphHeight(), p.dom.svg.attr("class", "net_gobrechts_d3_force").classed("border", p.conf.showBorder).attr("width", t).attr("height", e), p.conf.useDomParentWidth && p.dom.svg.attr("width", p.tools.getSvgParentInnerWidth()), p.dom.defs = p.dom.svg.append("defs"), p.dom.graphOverlay = p.dom.svg.append("g").attr("class", "graphOverlay"), p.dom.graphOverlaySizeHelper = p.dom.graphOverlay.append("rect").attr("class", "graphOverlaySizeHelper"), p.dom.graph = p.dom.graphOverlay.append("g").attr("class", "graph"), p.dom.legend = p.dom.svg.append("g").attr("class", "legend"), p.dom.loading = p.dom.svg.append("svg:g").attr("class", "loading").style("display", "none"), p.dom.loadingRect = p.dom.loading.append("svg:rect").attr("width", t).attr("height", e), p.dom.loadingText = p.dom.loading.append("svg:text").attr("x", t / 2).attr("y", e / 2).text("Loading..."), p.dom.defs.append("svg:marker").attr("id", p.dom.containerId + "_highlighted").attr("class", "highlighted").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 5).attr("markerHeight", 5).attr("orient", "auto").attr("markerUnits", "strokeWidth").append("svg:path").attr("d", "M0,0 L10,5 L0,10"), p.dom.defs.append("svg:marker").attr("id", p.dom.containerId + "_normal").attr("class", "normal").attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 5).attr("markerHeight", 5).attr("orient", "auto").attr("markerUnits", "strokeWidth").append("svg:path").attr("d", "M0,0 L10,5 L0,10"), null === document.querySelector("#" + p.dom.containerId + "_tooltip") ? p.dom.tooltip = p.dom.body.append("div").attr("id", p.dom.containerId + "_tooltip").attr("class", "net_gobrechts_d3_force_tooltip").style("top", "0px").style("left", "0px") : p.dom.tooltip = d3.select("#" + p.dom.containerId + "_tooltip")
    }, p.main.setupFunctionReferences = function () {
        p.main.force = d3.layout.force().on("start", function () {
            p.tools.log("Force started."), p.status.customize && p.dom.customizePositions && p.dom.customizePositions.text("Force started - wait for end event to show positions..."), p.status.forceTickCounter = 0, p.status.forceStartTime = (new Date).getTime(), p.status.forceRunning = !0, p.tools.log("Event forcestart triggered."), p.tools.triggerApexEvent(document.querySelector("#" + p.dom.containerId), "net_gobrechts_d3_force_forcestart"), "function" == typeof p.conf.onForceStartFunction && p.conf.onForceStartFunction.call(p.dom.svg)
        }).on("tick", function () {
            p.status.forceTickCounter += 1, p.status.userAgentIe9To11 && p.conf.showLinkDirection && (p.main.links.each(function () {
                this.parentNode.insertBefore(this, this)
            }), p.main.selfLinks.each(function () {
                this.parentNode.insertBefore(this, this)
            })), p.main.selfLinks.attr("transform", function (t) {
                return "translate(" + t.source.x + "," + t.source.y + ")"
            }), p.main.links.attr("x1", function (t) {
                return p.tools.adjustSourceX(t)
            }).attr("y1", function (t) {
                return p.tools.adjustSourceY(t)
            }).attr("x2", function (t) {
                return p.tools.adjustTargetX(t)
            }).attr("y2", function (t) {
                return p.tools.adjustTargetY(t)
            }), p.conf.showLabels && (p.main.labels.attr("x", function (t) {
                return t.x
            }).attr("y", function (t) {
                return t.y - t.radius - p.conf.labelDistance
            }), p.status.wrapLabelsOnNextTick && (p.main.labels.call(p.tools.wrapLabels, p.conf.wrappedLabelWidth), p.status.wrapLabelsOnNextTick = !1), p.conf.wrapLabels && p.main.labels.each(function () {
                var t = d3.select(this),
                    e = t.attr("y") - (t.attr("lines") - 1) * p.status.labelFontSize * p.conf.wrappedLabelLineHeight;
                t.attr("y", e).selectAll("tspan").attr("x", t.attr("x")).attr("y", e)
            }), p.main.labelPaths.attr("transform", function (t) {
                return "translate(" + t.x + "," + t.y + ")"
            })), p.main.nodes.attr("cx", function (t) {
                return t.x
            }).attr("cy", function (t) {
                return t.y
            })
        }).on("end", function () {
            p.conf.showLabels && p.conf.preventLabelOverlappingOnForceEnd && (p.data.simulatedAnnealingLabels = [], p.data.simulatedAnnealingAnchors = [], p.main.labels.each(function (t, e) {
                var o = d3.select(this);
                p.data.simulatedAnnealingLabels[e] = {
                    width: this.getBBox().width,
                    height: this.getBBox().height,
                    x: t.x,
                    y: o.attr("y") - (o.attr("lines") - 1) * p.status.labelFontSize * p.conf.wrappedLabelLineHeight
                }
            }), p.main.nodes.filter(function (t) {
                return !t.LABELCIRCULAR && !p.conf.labelsCircular
            }).each(function (t, e) {
                p.data.simulatedAnnealingAnchors[e] = {x: t.x, y: t.y - t.radius - p.conf.labelDistance, r: .5}
            }), p.lib.labelerPlugin().label(p.data.simulatedAnnealingLabels).anchor(p.data.simulatedAnnealingAnchors).width(p.tools.getGraphWidth()).height(p.tools.getGraphHeight()).start(p.conf.labelPlacementIterations), p.main.labels.each(function (t, e) {
                var o = d3.select(this), n = p.data.simulatedAnnealingLabels[e].x,
                    a = p.data.simulatedAnnealingLabels[e].y;
                p.conf.wrapLabels ? (a -= (o.attr("lines") - 1) * p.status.labelFontSize * p.conf.wrappedLabelLineHeight, o.transition().duration(800).attr("x", n).attr("y", a).selectAll("tspan").attr("x", n).attr("y", a)) : o.transition().duration(800).attr("x", n).attr("y", a)
            })), p.status.forceRunning = !1;
            var t = (new Date).getTime() - p.status.forceStartTime, e = (t / 1e3).toFixed(1),
                o = Math.round(p.status.forceTickCounter / (t / 1e3)), n = Math.round(t / p.status.forceTickCounter);
            p.status.customize && p.dom.customizePositions && p.dom.customizePositions.text(JSON.stringify(g.positions())), p.tools.log("Force ended."), p.tools.log(e + " seconds, " + p.status.forceTickCounter + " ticks to cool down (" + o + " ticks/s, " + n + " ms/tick)."), p.tools.log("Event forceend triggered."), p.tools.triggerApexEvent(document.querySelector("#" + p.dom.containerId), "net_gobrechts_d3_force_forceend"), p.conf.zoomToFitOnForceEnd ? g.zoomToFit() : p.conf.zoomMode || g.center(), "function" == typeof p.conf.onForceEndFunction && p.conf.onForceEndFunction.call(p.dom.svg)
        }), p.main.drag = p.main.force.drag(), p.main.lasso = p.lib.lassoPlugin().closePathDistance(100).closePathSelect(!0).hoverSelect(!0).area(p.dom.graphOverlay).pathContainer(p.dom.svg), p.main.zoom = d3.behavior.zoom(), p.main.zoomed = function () {
            p.conf.transform = {
                translate: p.main.zoom.translate(),
                scale: p.main.zoom.scale()
            }, p.dom.graph.attr("transform", "translate(" + p.main.zoom.translate() + ")scale(" + p.main.zoom.scale() + ")"), p.tools.writeConfObjectIntoWizard()
        }, p.main.interpolateZoom = function (t, n, e) {
            if (p.status.graphStarted) return n < p.conf.minZoomFactor ? n = p.conf.minZoomFactor : n > p.conf.maxZoomFactor && (n = p.conf.maxZoomFactor), d3.transition().duration(e).tween("zoom", function () {
                var e = d3.interpolate(p.main.zoom.translate(), t), o = d3.interpolate(p.main.zoom.scale(), n);
                return function (t) {
                    p.main.zoom.scale(o(t)).translate(e(t)), p.main.zoomed()
                }
            })
        }
    }, p.tools.parseBool = function (t) {
        switch (String(t).trim().toLowerCase()) {
            case"true":
            case"yes":
            case"1":
                return !0;
            case"false":
            case"no":
            case"0":
            case"":
            default:
                return !1
        }
    }, p.tools.parseXml = function (t) {
        var e = null;
        if (t) if (window.DOMParser) try {
            e = (new DOMParser).parseFromString(t, "text/xml")
        } catch (t) {
            e = null, p.tools.logError("DOMParser - unable to parse XML: " + t.message)
        } else if (window.ActiveXObject) try {
            (e = new ActiveXObject("Microsoft.XMLDOM")).async = !1, e.loadXML(t) || p.tools.logError("Microsoft.XMLDOM - unable to parse XML: " + e.parseError.reason + e.parseError.srcText)
        } catch (t) {
            e = null, p.tools.logError("Microsoft.XMLDOM - unable to parse XML: " + t.message)
        }
        return e
    }, p.tools.xmlToJson = function (t) {
        var n, e, a, o, s, r = null, i = function (t) {
            if (n = {}, 0 < t.attributes.length) for (var e = 0; e < t.attributes.length; e++) s = t.attributes.item(e), n[s.nodeName] = s.nodeValue;
            if (t.hasChildNodes()) for (var o = 0; o < t.childNodes.length; o++) (a = t.childNodes.item(o)).hasChildNodes() ? n[a.nodeName] = a.childNodes.item(0).nodeValue : n[a.nodeName] = "";
            return n
        };
        if (t && ((r = {data: {}}).data.nodes = [], r.data.links = [], t.childNodes.item(0).hasChildNodes())) for (var l = 0; l < t.childNodes.item(0).childNodes.length; l++) n = null, "nodes" === (o = (e = t.childNodes.item(0).childNodes.item(l)).nodeName) || "node" === o ? r.data.nodes.push(i(e)) : "links" !== o && "link" !== o || r.data.links.push(i(e));
        return r
    }, p.tools.getSvgParentInnerWidth = function () {
        var t = parseInt(p.dom.svgParent.style("width")), e = parseInt(p.dom.svg.style("border-width"));
        return t = (isNaN(t) ? p.conf.width : t) - parseInt(p.dom.svgParent.style("padding-left")) - parseInt(p.dom.svgParent.style("padding-right")) - 2 * (isNaN(e) ? 1 : e)
    }, p.tools.getGraphWidth = function () {
        return p.conf.useDomParentWidth ? p.tools.getSvgParentInnerWidth() : p.conf.width
    }, p.tools.getGraphHeight = function () {
        return p.conf.useDomParentWidth && p.conf.keepAspectRatioOnResize ? 1 * p.tools.getSvgParentInnerWidth() / (p.status.aspectRatio ? p.status.aspectRatio : 1.5) : p.conf.height
    }, p.tools.executeResize = function () {
        var t = p.tools.getGraphWidth(), e = p.tools.getGraphHeight();
        p.dom.svg.attr("width", t), p.dom.svg.attr("height", e), p.dom.graphOverlaySizeHelper.attr("width", t), p.dom.graphOverlaySizeHelper.attr("height", e), p.dom.loadingRect.attr("width", t), p.dom.loadingRect.attr("height", e), p.dom.loadingText.attr("x", t / 2), p.dom.loadingText.attr("y", e / 2), p.main.zoom.size([t, e]), p.conf.zoomToFitOnResize ? g.zoomToFit(0) : p.conf.zoomMode || g.center(0), p.conf.showLegend && p.tools.moveLegend(), p.tools.triggerResizeEvent()
    }, p.tools.triggerResizeEvent = function () {
        p.status.graphStarted && !p.status.resizeTriggered && (p.status.resizeTriggered = !0, setTimeout(function () {
            p.tools.executeResizeEvent()
        }, p.conf.onResizeFunctionTimeout))
    }, p.tools.executeResizeEvent = function () {
        p.tools.log("Event resize triggered."), p.tools.triggerApexEvent(document.querySelector("#" + p.dom.containerId), "net_gobrechts_d3_force_resize"), "function" == typeof p.conf.onResizeFunction && p.conf.onResizeFunction.call(p.dom.svg), p.status.resizeTriggered = !1
    }, p.tools.ResizeObserver = new ResizeObserver(function (t, e) {
        t.forEach(function (t) {
            p.conf.useDomParentWidth && p.tools.executeResize()
        })
    }), p.tools.log = function (t, e) {
        p.conf.debug && (e ? console.log(t) : console.log(p.status.debugPrefix + t)), p.status.customize && p.dom.customizeLog && p.dom.customizeLog.text(t + "\n" + p.dom.customizeLog.text())
    }, p.tools.logError = function (t) {
        console.log(p.status.debugPrefix + "ERROR: " + t), p.status.customize && p.dom.customizeLog && p.dom.customizeLog.text("ERROR: " + t + "\n" + p.dom.customizeLog.text())
    }, p.tools.triggerApexEvent = function (t, e, o) {
        p.status.apexPluginId && apex.event.trigger(t, e, o)
    }, p.tools.setRadiusFunction = function () {
        p.tools.radius = d3.scale.sqrt().range([p.conf.minNodeRadius, p.conf.maxNodeRadius]).domain(d3.extent(p.data.nodes, function (t) {
            return parseFloat(t.SIZEVALUE)
        }))
    }, p.tools.setColorFunction = function () {
        "color20" === p.conf.colorScheme ? p.tools.color = d3.scale.category20() : "color20b" === p.conf.colorScheme ? p.tools.color = d3.scale.category20b() : "color20c" === p.conf.colorScheme ? p.tools.color = d3.scale.category20c() : "color10" === p.conf.colorScheme ? p.tools.color = d3.scale.category10() : "direct" === p.conf.colorScheme ? p.tools.color = function (t) {
            return t
        } : (p.conf.colorScheme = "color20", p.tools.color = d3.scale.category20())
    }, p.tools.neighboring = function (t, e) {
        return -1 < p.data.neighbors.indexOf(t.ID + ":" + e.ID) || -1 < p.data.neighbors.indexOf(e.ID + ":" + t.ID)
    }, p.tools.getNearestGridPosition = function (t, e) {
        var o, n;
        return p.conf.zoomMode ? n = (o = t % p.conf.gridSize) > p.conf.gridSize / 2 ? t - o + p.conf.gridSize : t - o : e <= t ? (n = e - (o = e % p.conf.gridSize)) === e && (n -= p.conf.gridSize) : t <= p.conf.gridSize / 2 ? n = p.conf.gridSize : e <= (n = (o = t % p.conf.gridSize) > p.conf.gridSize / 2 ? t - o + p.conf.gridSize : t - o) && (n -= p.conf.gridSize), n
    }, p.tools.adjustSourceX = function (t) {
        return t.source.x + Math.cos(p.tools.calcAngle(t)) * t.source.radius
    }, p.tools.adjustSourceY = function (t) {
        return t.source.y + Math.sin(p.tools.calcAngle(t)) * t.source.radius
    }, p.tools.adjustTargetX = function (t) {
        return t.target.x - Math.cos(p.tools.calcAngle(t)) * t.target.radius
    }, p.tools.adjustTargetY = function (t) {
        return t.target.y - Math.sin(p.tools.calcAngle(t)) * t.target.radius
    }, p.tools.calcAngle = function (t) {
        return Math.atan2(t.target.y - t.source.y, t.target.x - t.source.x)
    }, p.tools.getSelfLinkPath = function (t) {
        var e = t.source.radius, o = t.source.radius + p.conf.selfLinkDistance,
            n = {source: {x: 0, y: 0, radius: e}, target: {x: 0 + o / 2, y: 0 + o, radius: e}},
            a = {source: {x: 0 - o / 2, y: 0 + o, radius: e}, target: {x: 0, y: 0, radius: e}},
            s = "M" + p.tools.adjustSourceX(n) + "," + p.tools.adjustSourceY(n);
        return s += " L" + (0 + o / 2) + "," + (0 + o), s += " A" + o + "," + o + " 0 0,1 " + (0 - o / 2) + "," + (0 + o), s += " L" + p.tools.adjustTargetX(a) + "," + p.tools.adjustTargetY(a)
    }, p.tools.getLabelPath = function (t) {
        var e = t.radius + p.conf.labelDistance, o = "M" + (0 - e) + ",0";
        return o += " a" + e + "," + e + " 0 0,1 " + 2 * e + ",0", o += " a" + e + "," + e + " 0 0,1 -" + 2 * e + ",0"
    }, p.tools.openLink = function (t) {
        "none" === p.conf.nodeLinkTarget ? window.location.assign(t.LINK) : "nodeID" === p.conf.nodeLinkTarget ? window.open(t.LINK, t.ID).focus() : "domContainerID" === p.conf.nodeLinkTarget ? window.open(t.LINK, p.dom.containerId).focus() : window.open(t.LINK, p.conf.nodeLinkTarget).focus()
    }, p.tools.applyConfigurationObject = function (t) {
        var e;
        for (e in t) t.hasOwnProperty(e) && p.conf.hasOwnProperty(e) && t[e] !== p.conf[e] && g[e](t[e])
    }, p.tools.zoomEventProxy = function (t) {
        return function () {
            p.conf.dragMode && (!p.conf.dragMode || "circle" === d3.event.target.tagName) || !p.conf.zoomMode || d3.event.altKey || d3.event.shiftKey || t.apply(this, arguments)
        }
    }, p.tools.lassoEventProxy = function (t) {
        return function () {
            p.conf.dragMode && "circle" === d3.event.target.tagName || !p.conf.lassoMode || p.conf.zoomMode && !d3.event.altKey && !d3.event.shiftKey || t.apply(this, arguments)
        }
    }, p.tools.showTooltip = function (t) {
        var e;
        p.dom.tooltip.html(t).style("display", "block"), "svgTopLeft" === p.conf.tooltipPosition ? (e = p.tools.getOffsetRect(p.dom.svg.node()), p.dom.tooltip.style("top", e.top + (p.dom.svg.style("border-width") ? parseInt(p.dom.svg.style("border-width")) : 1) + "px").style("left", e.left + (p.dom.svg.style("border-width") ? parseInt(p.dom.svg.style("border-width")) : 1) + "px")) : "svgTopRight" === p.conf.tooltipPosition ? (e = p.tools.getOffsetRect(p.dom.svg.node()), p.dom.tooltip.style("top", e.top + parseInt(p.dom.svg.style("border-width") ? parseInt(p.dom.svg.style("border-width")) : 1) + "px").style("left", e.left + parseInt(p.dom.svg.style("width")) + parseInt(p.dom.svg.style("border-width") ? parseInt(p.dom.svg.style("border-width")) : 1) - parseInt(p.dom.tooltip.style("width")) - 2 * parseInt(p.dom.tooltip.style("border-width") ? parseInt(p.dom.tooltip.style("border-width")) : 0) - parseInt(p.dom.tooltip.style("padding-left")) - parseInt(p.dom.tooltip.style("padding-right")) + "px")) : p.dom.tooltip.style("left", d3.event.pageX + 10 + "px").style("top", d3.event.pageY + "px")
    }, p.tools.hideTooltip = function () {
        p.dom.tooltip.style("display", "none")
    }, p.tools.onLinkClick = function (t) {
        if (d3.event.defaultPrevented) return null;
        p.tools.log("Event linkclick triggered."), p.tools.triggerApexEvent(this, "net_gobrechts_d3_force_linkclick", t), "function" == typeof p.conf.onLinkClickFunction && p.conf.onLinkClickFunction.call(this, d3.event, t)
    }, p.tools.getMarkerUrl = function (t) {
        return p.conf.showLinkDirection ? "url(#" + p.dom.containerId + "_" + (t.COLOR ? t.COLOR : "normal") + ")" : null
    }, p.tools.getMarkerUrlHighlighted = function () {
        return p.conf.showLinkDirection ? "url(#" + p.dom.containerId + "_highlighted)" : null
    }, p.tools.onLinkMouseenter = function (t) {
        p.conf.showTooltips && t.INFOSTRING && p.tools.showTooltip(t.INFOSTRING)
    }, p.tools.onLinkMouseleave = function () {
        p.conf.showTooltips && p.tools.hideTooltip()
    }, p.tools.onNodeMouseenter = function (e) {
        p.main.nodes.classed("highlighted", function (t) {
            return p.tools.neighboring(t, e)
        }), p.main.links.classed("highlighted", function (t) {
            return t.source.ID === e.ID || t.target.ID === e.ID
        }).style("marker-end", function (t) {
            return t.source.ID === e.ID || t.target.ID === e.ID ? p.tools.getMarkerUrlHighlighted(t) : p.tools.getMarkerUrl(t)
        }), p.main.selfLinks.classed("highlighted", function (t) {
            return t.FROMID === e.ID
        }).style("marker-end", function (t) {
            return t.source.ID === e.ID || t.target.ID === e.ID ? p.tools.getMarkerUrlHighlighted(t) : p.tools.getMarkerUrl(t)
        }), p.conf.showLabels && (p.main.labels.classed("highlighted", function (t) {
            return t.ID === e.ID
        }), p.main.labelsCircular.classed("highlighted", function (t) {
            return t.ID === e.ID
        })), d3.select(this).classed("highlighted", !0), p.tools.log("Event nodemouseenter triggered."), p.tools.triggerApexEvent(this, "net_gobrechts_d3_force_mouseenter", e), "function" == typeof p.conf.onNodeMouseenterFunction && p.conf.onNodeMouseenterFunction.call(this, d3.event, e), p.conf.showTooltips && e.INFOSTRING && p.tools.showTooltip(e.INFOSTRING)
    }, p.tools.onNodeMouseleave = function (t) {
        p.main.nodes.classed("highlighted", !1), p.main.links.classed("highlighted", !1).style("marker-end", p.tools.getMarkerUrl), p.main.selfLinks.classed("highlighted", !1).style("marker-end", p.tools.getMarkerUrl), p.conf.showLabels && (p.main.labels.classed("highlighted", !1), p.main.labelsCircular.classed("highlighted", !1)), p.tools.log("Event nodemouseleave triggered."), p.tools.triggerApexEvent(this, "net_gobrechts_d3_force_mouseleave", t), "function" == typeof p.conf.onNodeMouseleaveFunction && p.conf.onNodeMouseleaveFunction.call(this, d3.event, t), p.conf.showTooltips && p.tools.hideTooltip()
    }, p.tools.onNodeClick = function (t) {
        if (d3.event.defaultPrevented) return null;
        t.LINK && "click" === p.conf.nodeEventToOpenLink && p.tools.openLink(t), "click" === p.conf.nodeEventToStopPinMode && d3.select(this).classed("fixed", t.fixed = 0), p.tools.log("Event nodeclick triggered."), p.tools.triggerApexEvent(this, "net_gobrechts_d3_force_click", t), "function" == typeof p.conf.onNodeClickFunction && p.conf.onNodeClickFunction.call(this, d3.event, t)
    }, p.tools.onNodeDblclick = function (t) {
        t.LINK && "dblclick" === p.conf.nodeEventToOpenLink && p.tools.openLink(t), "dblclick" === p.conf.nodeEventToStopPinMode && d3.select(this).classed("fixed", t.fixed = 0), p.tools.log("Event nodedblclick triggered."), p.tools.triggerApexEvent(this, "net_gobrechts_d3_force_dblclick", t), "function" == typeof p.conf.onNodeDblclickFunction && p.conf.onNodeDblclickFunction.call(this, d3.event, t)
    }, p.tools.onNodeContextmenu = function (t) {
        p.conf.onNodeContextmenuPreventDefault && d3.event.preventDefault(), t.LINK && "contextmenu" === p.conf.nodeEventToOpenLink && p.tools.openLink(t), "contextmenu" === p.conf.nodeEventToStopPinMode && d3.select(this).classed("fixed", t.fixed = 0), p.tools.log("Event nodecontextmenu triggered."), p.tools.triggerApexEvent(this, "net_gobrechts_d3_force_contextmenu", t), "function" == typeof p.conf.onNodeContextmenuFunction && p.conf.onNodeContextmenuFunction.call(this, d3.event, t)
    }, p.tools.onLassoStart = function (t) {
        var e = {numberOfSelectedNodes: 0, idsOfSelectedNodes: null};
        e.numberOfNodes = t.size(), e.nodes = t, p.tools.log("Event lassostart triggered."), p.tools.triggerApexEvent(document.querySelector("#" + p.dom.containerId), "net_gobrechts_d3_force_lassostart", e), "function" == typeof p.conf.onLassoStartFunction && p.conf.onLassoStartFunction.call(p.dom.svg, d3.event, e)
    }, p.tools.onLassoEnd = function (t) {
        var e = {numberOfSelectedNodes: 0, idsOfSelectedNodes: ""};
        e.numberOfNodes = t.size(), (e.nodes = t).each(function (t) {
            t.selected && (e.idsOfSelectedNodes += t.ID + ":", e.numberOfSelectedNodes++)
        }), e.idsOfSelectedNodes = 0 < e.idsOfSelectedNodes.length ? e.idsOfSelectedNodes.substr(0, e.idsOfSelectedNodes.length - 1) : null, p.tools.log("Event lassoend triggered."), p.tools.triggerApexEvent(document.querySelector("#" + p.dom.containerId), "net_gobrechts_d3_force_lassoend", e), "function" == typeof p.conf.onLassoEndFunction && p.conf.onLassoEndFunction.call(p.dom.svg, d3.event, e)
    }, p.tools.getOffsetRect = function (t) {
        var e = t.getBoundingClientRect(), o = document.body, n = document.documentElement,
            a = window.pageYOffset || n.scrollTop || o.scrollTop,
            s = window.pageXOffset || n.scrollLeft || o.scrollLeft, r = n.clientTop || o.clientTop || 0,
            i = n.clientLeft || o.clientLeft || 0, l = e.top + a - r, d = e.left + s - i;
        return {top: Math.round(l), left: Math.round(d)}
    }, p.tools.createLegend = function () {
        p.status.initialLegendHeight = p.tools.getGraphHeight(), p.data.distinctNodeColorValues.forEach(function (t, e) {
            var o = t.split(";");
            p.dom.legend.append("circle").attr("cx", 11).attr("cy", p.status.initialLegendHeight - (14 * (e + 1) - 3)).attr("r", 6).attr("fill", p.tools.color(o[1])), p.dom.legend.append("text").attr("x", 21).attr("y", p.status.initialLegendHeight - (14 * (e + 1) - 6)).text(o[0] ? o[0] : o[1])
        })
    }, p.tools.moveLegend = function () {
        var t = p.tools.getGraphHeight() - p.status.initialLegendHeight;
        p.dom.legend.attr("transform", "translate(0," + t + ")")
    }, p.tools.removeLegend = function () {
        p.dom.legend.selectAll("*").remove(), p.dom.legend.attr("transform", null)
    }, p.tools.writeConfObjectIntoWizard = function () {
        p.status.customize && p.dom.customizeConfObject.text(JSON.stringify(g.optionsCustomizationWizard(), null, "  "))
    }, p.tools.createCustomizeLink = function () {
        !p.status.customize && (p.conf.debug || document.querySelector("#apex-dev-toolbar") || document.querySelector("#apexDevToolbar")) && null === document.querySelector("#" + p.dom.containerId + " svg text.link") && p.dom.svg.append("svg:text").attr("class", "link").attr("x", 5).attr("y", 15).attr("text-anchor", "start").text("Customize Me").on("click", function () {
            g.customize(!0)
        })
    }, p.tools.removeCustomizeLink = function () {
        p.dom.svg.select("#" + p.dom.containerId + " svg text.link").remove()
    }, p.tools.customizeDrag = d3.behavior.drag().on("dragstart", function () {
        var t = d3.mouse(document.body);
        p.dom.customizePosition = p.tools.getOffsetRect(document.querySelector("#" + p.dom.containerId + "_customizing")), p.dom.customizePosition.mouseLeft = t[0] - p.dom.customizePosition.left, p.dom.customizePosition.mouseTop = t[1] - p.dom.customizePosition.top
    }).on("drag", function () {
        var t = d3.mouse(document.body);
        p.dom.customize.style("left", Math.max(0, t[0] - p.dom.customizePosition.mouseLeft) + "px").style("top", Math.max(0, t[1] - p.dom.customizePosition.mouseTop) + "px")
    }).on("dragend", function () {
        p.dom.customizePosition = p.tools.getOffsetRect(p.dom.customize.node())
    }), p.tools.createCustomizeWizardIfNotRendering = function () {
        p.status.customize && !p.status.graphRendering && p.tools.createCustomizeWizard()
    }, p.tools.createCustomizeWizard = function () {
        var t, e, o, n, a, s, r, i, l, d = 4, c = function () {
            g.releaseFixedNodes().resume()
        }, u = function () {
            p.status.customizeCurrentTabPosition = this.id, "text" === p.confDefaults[this.name].type ? g[this.name](this.options[this.selectedIndex].value).render() : "number" === p.confDefaults[this.name].type ? g[this.name](parseFloat(this.options[this.selectedIndex].value)).render() : "bool" === p.confDefaults[this.name].type && g[this.name]("true" === this.options[this.selectedIndex].value).render()
        }, f = function (e) {
            p.confDefaults[e].options.forEach(function (t) {
                r = t, s.append("option").attr("value", t).attr("selected", function () {
                    return "text" === p.confDefaults[e].type || "bool" === p.confDefaults[e].type ? r === p.conf[e] ? (i = !0, "selected") : null : "number" === p.confDefaults[e].type ? parseFloat(r) === p.conf[e] ? (i = !0, "selected") : null : void 0
                }).text(t)
            })
        };
        if (p.status.customize) {
            for (l in p.tools.removeCustomizeLink(), p.dom.customizePosition || (p.dom.customizePosition = p.tools.getOffsetRect(p.dom.svg.node()), p.dom.customizePosition.top = p.dom.customizePosition.top + 100, p.dom.customizePosition.left = p.dom.customizePosition.left + 200), null !== document.querySelector("#" + p.dom.containerId + "_customizing") && p.dom.customize.remove(), p.dom.customize = p.dom.body.insert("div").attr("id", p.dom.containerId + "_customizing").attr("class", "net_gobrechts_d3_force_customize").style("left", p.dom.customizePosition.left + "px").style("top", p.dom.customizePosition.top + "px"), p.dom.customize.append("span").attr("class", "drag").call(p.tools.customizeDrag).append("span").attr("class", "title").text('Customize "' + p.dom.containerId + '"'), p.dom.customize.append("a").attr("class", "close focus").attr("tabindex", 1).text("Close").on("click", function () {
                p.status.customize = !1, p.tools.removeCustomizeWizard(), p.tools.createCustomizeLink()
            }).on("keydown", function () {
                13 === d3.event.keyCode && (p.status.customize = !1, p.tools.removeCustomizeWizard(), p.tools.createCustomizeLink())
            }), o = (e = (t = p.dom.customize.append("table")).append("tr")).append("td").style("vertical-align", "top"), p.dom.customizeMenu = o.append("span"), p.dom.customizeOptionsTable = o.append("table"), p.confDefaults) p.confDefaults.hasOwnProperty(l) && p.confDefaults[l].display && (d += 1, (n = p.dom.customizeOptionsTable.append("tr").attr("class", p.confDefaults[l].relation + "-related")).append("td").attr("class", "label").html('<a href="https://ogobrecht.github.io/d3-force-apex-plugin/module-API.html#.' + l + '" target="github_d3_force" tabindex="' + d + '100">' + l + "</a>"), a = n.append("td"), s = a.append("select").attr("id", p.dom.containerId + "_" + l).attr("name", l).attr("value", p.conf[l]).attr("tabindex", d + 1).classed("warning", p.confDefaults[l].internal).on("change", u), i = !1, f(l), i || (s.append("option").attr("value", p.conf[l]).attr("selected", "selected").text(p.conf[l]), p.confDefaults[l].options.push(p.conf[l])), "pinMode" === l && a.append("a").text(" release all").attr("href", null).on("click", c));
            p.dom.customizeOptionsTable.style("width", d3.select(p.dom.customizeOptionsTable).node()[0][0].clientWidth + "px"), o.append("span").html("<br>"), (o = e.append("td").style("vertical-align", "top").style("padding-left", "5px")).append("span").html('Your Configuration Object<p style="font-size:10px;margin:0;">' + (p.status.apexPluginId ? "To save your options please copy<br>this to your plugin region attributes.<br>Only non-default options are shown.</p>" : "Use this to initialize your graph.<br>Only non-default options are shown.</p>")), p.dom.customizeConfObject = o.append("textarea").attr("tabindex", d + 5).attr("readonly", "readonly"), o.append("span").html("<br><br>Current Positions<br>"), p.dom.customizePositions = o.append("textarea").attr("tabindex", d + 6).attr("readonly", "readonly").text(p.status.forceRunning ? "Force started - wait for end event to show positions..." : JSON.stringify(g.positions())), o.append("span").html("<br><br>Debug Log (descending)<br>"), p.dom.customizeLog = o.append("textarea").attr("tabindex", d + 7).attr("readonly", "readonly"), o = (e = t.append("tr")).append("td").attr("colspan", 2).html("Copyrights:"), o = (e = t.append("tr")).append("td").attr("colspan", 2).html('<table><tr><td style="padding-right:20px;"><a href="https://github.com/ogobrecht/d3-force-apex-plugin" target="_blank" tabindex="' + (d + 8) + '">D3 Force APEX Plugin</a> (' + p.version + ')<br>Ottmar Gobrecht</td><td style="padding-right:20px;"><a href="https://github.com/mbostock/d3" target="d3js_org" tabindex="' + (d + 9) + '">D3.js</a> (' + d3.version + ') and <a href="https://github.com/d3/d3-plugins/tree/master/lasso" target="_blank" tabindex="' + (d + 10) + '">D3 Lasso Plugin</a> (modified)<br>Mike Bostock</td></tr><tr><td colspan="3"><a href="https://github.com/tinker10/D3-Labeler" target="github_d3_labeler" tabindex="' + (d + 11) + '">D3 Labeler Plugin</a> (automatic label placement using simulated annealing)<br>Evan Wang</td></tr></table>'), p.tools.createCustomizeMenu(p.status.customizeCurrentMenu), p.tools.writeConfObjectIntoWizard(), p.status.customizeCurrentTabPosition && document.getElementById(p.status.customizeCurrentTabPosition).focus()
        } else p.tools.removeCustomizeWizard(), p.tools.createCustomizeLink()
    }, p.tools.removeCustomizeWizard = function () {
        d3.select("#" + p.dom.containerId + "_customizing").remove()
    }, p.tools.createCustomizeMenu = function (t) {
        p.status.customizeCurrentMenu = t, p.dom.customizeMenu.selectAll("*").remove(), p.dom.customizeMenu.append("span").text("Show options for:"), "nodes" === p.status.customizeCurrentMenu ? (p.dom.customizeMenu.append("span").style("font-weight", "bold").style("margin-left", "10px").text("NODES"), p.dom.customizeOptionsTable.selectAll("tr.node-related").classed("hidden", !1), p.dom.customizeOptionsTable.selectAll("tr.label-related,tr.link-related,tr.graph-related").classed("hidden", !0)) : p.dom.customizeMenu.append("a").style("font-weight", "bold").style("margin-left", "10px").text("NODES").attr("tabindex", 2).on("click", function () {
            p.tools.createCustomizeMenu("nodes"), p.dom.customizeOptionsTable.selectAll("tr.node-related").classed("hidden", !1), p.dom.customizeOptionsTable.selectAll("tr.label-related,tr.link-related,tr.graph-related").classed("hidden", !0)
        }).on("keydown", function () {
            13 === d3.event.keyCode && (p.tools.createCustomizeMenu("nodes"), p.dom.customizeOptionsTable.selectAll("tr.node-related").classed("hidden", !1), p.dom.customizeOptionsTable.selectAll("tr.label-related,tr.link-related,tr.graph-related").classed("hidden", !0))
        }), "labels" === p.status.customizeCurrentMenu ? (p.dom.customizeMenu.append("span").style("font-weight", "bold").style("margin-left", "10px").text("LABELS"), p.dom.customizeOptionsTable.selectAll("tr.label-related").classed("hidden", !1), p.dom.customizeOptionsTable.selectAll("tr.node-related,tr.link-related,tr.graph-related").classed("hidden", !0)) : p.dom.customizeMenu.append("a").style("font-weight", "bold").style("margin-left", "10px").text("LABELS").attr("tabindex", 2).on("click", function () {
            p.tools.createCustomizeMenu("labels"), p.dom.customizeOptionsTable.selectAll("tr.label-related").classed("hidden", !1), p.dom.customizeOptionsTable.selectAll("tr.node-related,tr.link-related,tr.graph-related").classed("hidden", !0)
        }).on("keydown", function () {
            13 === d3.event.keyCode && (p.tools.createCustomizeMenu("labels"), p.dom.customizeOptionsTable.selectAll("tr.label-related").classed("hidden", !1), p.dom.customizeOptionsTable.selectAll("tr.node-related,tr.link-related,tr.graph-related").classed("hidden", !0))
        }), "links" === p.status.customizeCurrentMenu ? (p.dom.customizeMenu.append("span").style("font-weight", "bold").style("margin-left", "10px").text("LINKS"), p.dom.customizeOptionsTable.selectAll("tr.link-related").classed("hidden", !1), p.dom.customizeOptionsTable.selectAll("tr.node-related,tr.label-related,tr.graph-related").classed("hidden", !0)) : p.dom.customizeMenu.append("a").style("font-weight", "bold").style("margin-left", "10px").text("LINKS").attr("tabindex", 3).on("click", function () {
            p.tools.createCustomizeMenu("links"), p.dom.customizeOptionsTable.selectAll("tr.link-related").classed("hidden", !1), p.dom.customizeOptionsTable.selectAll("tr.node-related,tr.label-related,tr.graph-related").classed("hidden", !0)
        }).on("keydown", function () {
            13 === d3.event.keyCode && (p.tools.createCustomizeMenu("links"), p.dom.customizeOptionsTable.selectAll("tr.link-related").classed("hidden", !1), p.dom.customizeOptionsTable.selectAll("tr.node-related,tr.label-related,tr.graph-related").classed("hidden", !0))
        }), "graph" === p.status.customizeCurrentMenu ? (p.dom.customizeMenu.append("span").style("font-weight", "bold").style("margin-left", "10px").text("GRAPH"), p.dom.customizeOptionsTable.selectAll("tr.graph-related").classed("hidden", !1), p.dom.customizeOptionsTable.selectAll("tr.node-related,tr.label-related,tr.link-related").classed("hidden", !0)) : p.dom.customizeMenu.append("a").style("font-weight", "bold").style("margin-left", "10px").text("GRAPH").attr("tabindex", 4).on("click", function () {
            p.tools.createCustomizeMenu("graph"), p.dom.customizeOptionsTable.selectAll("tr.graph-related").classed("hidden", !1), p.dom.customizeOptionsTable.selectAll("tr.node-related,tr.label-related,tr.link-related").classed("hidden", !0)
        }).on("keydown", function () {
            13 === d3.event.keyCode && (p.tools.createCustomizeMenu("graph"), p.dom.customizeOptionsTable.selectAll("tr.graph-related").classed("hidden", !1), p.dom.customizeOptionsTable.selectAll("tr.node-related,tr.label-related,tr.link-related").classed("hidden", !0))
        }), p.dom.customizeMenu.append("span").html("<br><br>")
    }, p.tools.wrapLabels = function (t, u) {
        t.each(function (t, e) {
            var o = d3.select(this);
            if (0 === e && (p.status.labelFontSize = parseInt(o.style("font-size"))), !this.hasAttribute("lines")) {
                var n,
                    a = o.text().split("none" !== p.conf.labelSplitCharacter ? p.conf.labelSplitCharacter : /\s+/).reverse(),
                    s = [], r = 0, i = p.status.labelFontSize * p.conf.wrappedLabelLineHeight, l = o.attr("x"),
                    d = o.attr("y"), c = o.text(null).append("tspan").attr("x", l).attr("y", d).attr("dy", "0px");
                if ("none" !== p.conf.labelSplitCharacter) for (; n = a.pop();) c = o.append("tspan").attr("x", l).attr("y", d).attr("dy", ++r * i + 0 + "px").text(n); else for (; n = a.pop();) s.push(n), c.text(s.join(" ")), c.node().getComputedTextLength() > u && (s.pop(), c.text(s.join(" ")), s = [n], c = o.append("tspan").attr("x", l).attr("y", d).attr("dy", ++r * i + 0 + "px").text(n));
                o.attr("lines", r + 1)
            }
        })
    }, p.lib.labelerPlugin = function () {
        var u, m = [], h = [], f = 1, p = 1, e = {}, g = !1, L = function (t) {
            var e = m.length, o = 0, n = m[t].x - h[t].x, a = h[t].y - m[t].y, s = Math.sqrt(n * n + a * a);
            0 < s && (o += .2 * s), a /= s, o += 0 < (n /= s) && 0 < a ? 0 : n < 0 && 0 < a ? 1 : n < 0 && a < 0 ? 2 : 3;
            for (var r, i, l, d, c = m[t].x, u = m[t].y - m[t].height + 2, f = m[t].x + m[t].width, p = m[t].y + 2, g = 0; g < e; g++) g !== t && (v(h[t].x, m[t].x, h[g].x, m[g].x, h[t].y, m[t].y, h[g].y, m[g].y) && (o += 1), r = m[g].x, l = m[g].y - m[g].height + 2, i = m[g].x + m[g].width, d = m[g].y + 2, o += 30 * (Math.max(0, Math.min(i, f) - Math.max(r, c)) * Math.max(0, Math.min(d, p) - Math.max(l, u)))), r = h[g].x - h[g].r, l = h[g].y - h[g].r, i = h[g].x + h[g].r, d = h[g].y + h[g].r, o += 30 * (Math.max(0, Math.min(i, f) - Math.max(r, c)) * Math.max(0, Math.min(d, p) - Math.max(l, u)));
            return o
        }, s = function (t) {
            var e, o = Math.floor(Math.random() * m.length), n = m[o].x, a = m[o].y;
            e = g ? u(o, m, h) : L(o), m[o].x += 5 * (Math.random() - .5), m[o].y += 5 * (Math.random() - .5), m[o].x > f && (m[o].x = n), m[o].x < 0 && (m[o].x = n), m[o].y > p && (m[o].y = a), m[o].y < 0 && (m[o].y = a);
            var s = (g ? u(o, m, h) : L(o)) - e;
            Math.random() < Math.exp(-s / t) ? 1 : (m[o].x = n, m[o].y = a, 1)
        }, r = function (t) {
            var e, o = Math.floor(Math.random() * m.length), n = m[o].x, a = m[o].y;
            e = g ? u(o, m, h) : L(o);
            var s = .5 * (Math.random() - .5), r = Math.sin(s), i = Math.cos(s);
            m[o].x -= h[o].x, m[o].y -= h[o].y;
            var l = m[o].x * i - m[o].y * r, d = m[o].x * r + m[o].y * i;
            m[o].x = l + h[o].x, m[o].y = d + h[o].y, m[o].x > f && (m[o].x = n), m[o].x < 0 && (m[o].x = n), m[o].y > p && (m[o].y = a), m[o].y < 0 && (m[o].y = a);
            var c = (g ? u(o, m, h) : L(o)) - e;
            Math.random() < Math.exp(-c / t) ? 1 : (m[o].x = n, m[o].y = a, 1)
        }, v = function (t, e, o, n, a, s, r, i) {
            var l, d, c;
            return d = ((e - t) * (a - r) - (s - a) * (t - o)) / (c = (i - r) * (e - t) - (n - o) * (s - a)), !((l = ((n - o) * (a - r) - (i - r) * (t - o)) / c) < 0 || 1 < l || d < 0 || 1 < d)
        }, i = function (t, e, o) {
            return t - e / o
        };
        return e.start = function (t) {
            for (var e = m.length, o = 1, n = 0; n < t; n++) {
                for (var a = 0; a < e; a++) Math.random() < .5 ? s(o) : r(o);
                o = i(o, 1, t)
            }
        }, e.width = function (t) {
            return arguments.length ? (f = t, e) : f
        }, e.height = function (t) {
            return arguments.length ? (p = t, e) : p
        }, e.label = function (t) {
            return arguments.length ? (m = t, e) : m
        }, e.anchor = function (t) {
            return arguments.length ? (h = t, e) : h
        }, e.alt_energy = function (t) {
            return arguments.length ? (u = t, g = !0, e) : L
        }, e.alt_schedule = function (t) {
            return arguments.length ? (t, !0, e) : i
        }, e
    }, p.lib.lassoPlugin = function () {
        var O = null, k = 75, E = !0, R = !1, n = !0, a = null, s = null, C = {
            start: function () {
            }, draw: function () {
            }, end: function () {
            }
        };

        function o() {
            var t, v, b, y, x, z, D, I, e, o = d3.select(this[0][0]);
            y = 0 === (s = s || o).selectAll("g.lasso").size() ? (t = s.append("g").attr("class", "lasso"), v = t.append("path").attr("class", "drawn"), b = t.append("path").attr("class", "loop_close"), t.append("path").attr("class", "complete_path").attr("display", "none")) : (t = s.select("g.lasso"), v = t.select("path.drawn"), b = t.select("path.loop_close"), t.select("path.complete_path")), e = d3.behavior.drag().on("dragstart", function () {
                x = "", v.attr("d", null), b.attr("d", null), O[I = 0].forEach(function (t) {
                    t.hoverSelected = !1, t.loopSelected = !1;
                    var e = t.getBBox(), o = t.getCTM();
                    t.lassoPoint = {
                        cx: Math.round((e.x + e.width / 2) * o.a + o.e),
                        cy: Math.round((e.y + e.height / 2) * o.d + o.f),
                        edges: {top: 0, right: 0, bottom: 0, left: 0},
                        close_edges: {left: 0, right: 0}
                    }
                }), !0 === n && O.on("mouseover.lasso", function () {
                    d3.select(this)[0][0].hoverSelected = !0
                }), C.start()
            }).on("drag", function () {
                var t, e, o, n, a, s, r, i, l, d, c, u, f = d3.mouse(this)[0], p = d3.mouse(this)[1], g = function (t) {
                    u.x > t.lassoPoint.cx && (t.lassoPoint.edges.right = t.lassoPoint.edges.right + 1), u.x < t.lassoPoint.cx && (t.lassoPoint.edges.left = t.lassoPoint.edges.left + 1)
                }, m = function (t) {
                    Math.round(c.y) !== Math.round(l.y) && Math.round(c.x) > t.lassoPoint.cx && (t.lassoPoint.close_edges.right = 1), Math.round(c.y) !== Math.round(l.y) && Math.round(c.x) < t.lassoPoint.cx && (t.lassoPoint.close_edges.left = 1)
                }, h = function (t) {
                    return t.lassoPoint.cy === Math.round(c.y)
                }, L = function (t) {
                    return t.lassoPoint.cy === u.y && t.lassoPoint.cy !== d.y ? !(D = {
                        x: d.x,
                        y: d.y
                    }) : (t.lassoPoint.cy !== u.y || t.lassoPoint.cy !== d.y) && (t.lassoPoint.cy === d.y && t.lassoPoint.cy !== u.y ? S(t.lassoPoint.cy - u.y) !== S(t.lassoPoint.cy - D.y) : (D = {
                        x: d.x,
                        y: d.y
                    }, S(t.lassoPoint.cy - u.y) !== S(t.lassoPoint.cy - d.y)))
                };
                for ("" === x ? (x = x + "M " + f + " " + p, z = [f, p]) : x = x + " L " + f + " " + p, O[0].forEach(function (t) {
                    t.lassoPoint.close_edges = {left: 0, right: 0}
                }), t = Math.sqrt(Math.pow(f - z[0], 2) + Math.pow(p - z[1], 2)), e = "M " + f + " " + p + " L " + z[0] + " " + z[1], v.attr("d", x), t <= k ? b.attr("display", null) : b.attr("display", "none"), R = t <= k, o = d3.select("path")[0][0].attributes.d.value + "Z", y.attr("d", o), r = (s = v.node()).getTotalLength(), s.getPointAtLength(I - 1), i = I; i <= r; i++) c = s.getPointAtLength(i), u = {
                    x: Math.round(100 * c.x) / 100,
                    y: Math.round(100 * c.y) / 100
                }, l = s.getPointAtLength(i - 1), d = {
                    x: Math.round(100 * l.x) / 100,
                    y: Math.round(100 * l.y) / 100
                }, O[0].filter(L).forEach(g);
                if (!0 === R && !0 === E) {
                    for (b.attr("d", e), a = (n = b.node()).getTotalLength(), i = 0; i <= a; i++) c = n.getPointAtLength(i), l = n.getPointAtLength(i - 1), O[0].filter(h).forEach(m);
                    O[0].forEach(function (t) {
                        0 < t.lassoPoint.edges.left + t.lassoPoint.close_edges.left && (t.lassoPoint.edges.right + t.lassoPoint.close_edges.right) % 2 == 1 ? t.loopSelected = !0 : t.loopSelected = !1
                    })
                } else O[0].forEach(function (t) {
                    t.loopSelected = !1
                });
                d3.selectAll(O[0].filter(function (t) {
                    return t.loopSelected && R || t.hoverSelected
                })).attr("d", function (t) {
                    return t.possible = !0, t.possible
                }), d3.selectAll(O[0].filter(function (t) {
                    return !(t.loopSelected && R || t.hoverSelected)
                })).attr("d", function (t) {
                    return t.possible = !1, t.possible
                }), C.draw(), I = r + 1
            }).on("dragend", function () {
                O.on("mouseover.lasso", null), O.filter(function (t) {
                    return !0 === t.possible
                }).attr("d", function (t) {
                    return t.selected = !0, t.selected
                }), O.filter(function (t) {
                    return !1 === t.possible
                }).attr("d", function (t) {
                    return t.selected = !1, t.selected
                }), O.attr("d", function (t) {
                    return t.possible = !1, t.possible
                }), v.attr("d", null), b.attr("d", null), C.end()
            }), a.call(e)
        }

        function S(t) {
            return t ? t < 0 ? -1 : 1 : 0
        }

        return o.items = function (t) {
            return arguments.length ? ((O = t)[0].forEach(function (t) {
                var e = d3.select(t);
                void 0 === e.datum() ? e.datum({possible: !1, selected: !1}) : e.attr("d", function (t) {
                    return t.possible = !1, t.selected = !1, t
                })
            }), o) : O
        }, o.closePathDistance = function (t) {
            return arguments.length ? (k = t, o) : k
        }, o.closePathSelect = function (t) {
            return arguments.length ? (E = !0 === t, o) : E
        }, o.isPathClosed = function (t) {
            return arguments.length ? (R = !0 === t, o) : R
        }, o.hoverSelect = function (t) {
            return arguments.length ? (n = !0 === t, o) : n
        }, o.on = function (t, e) {
            if (!arguments.length) return C;
            if (1 === arguments.length) return C[t];
            return -1 < ["start", "draw", "end"].indexOf(t) && (C[t] = e), o
        }, o.area = function (t) {
            return arguments.length ? (a = t, o) : a
        }, o.pathContainer = function (t) {
            return arguments.length ? (s = d3.select(t[0][0]), o) : s
        }, o
    }, g.start = function (t) {
        var e;
        return t ? g.render(t) : p.status.apexPluginId ? (p.conf.showLoadingIndicatorOnAjaxCall && g.showLoadingIndicator(!0), apex.server.plugin(p.status.apexPluginId, {
            p_debug: $v("pdebug"),
            pageItems: p.status.apexPageItemsToSubmit
        }, {
            success: function (t) {
                p.conf.showLoadingIndicatorOnAjaxCall && g.showLoadingIndicator(!1), "<" === (e = t.trim().substr(0, 1)) || "{" === e ? g.render(t.trim()) : "no_query_defined" === t.trim().substr(0, 16) ? (p.tools.logError("No query defined."), g.render()) : "query_returned_no_data" === t.trim().substr(0, 22) ? (p.tools.logError("Query returned no data."), g.render({
                    data: {
                        nodes: [{
                            ID: "1",
                            LABEL: "ERROR: No data.",
                            COLORVALUE: "1",
                            SIZEVALUE: "1"
                        }], links: []
                    }
                })) : (p.tools.logError(t), g.render({
                    data: {
                        nodes: [{
                            ID: "1",
                            LABEL: "ERROR: " + t + ".",
                            COLORVALUE: "1",
                            SIZEVALUE: "1"
                        }], links: []
                    }
                }))
            }, error: function (t, e, o) {
                p.tools.logError("AJAX call terminated with errors: " + o + "."), g.render({
                    data: {
                        nodes: [{
                            ID: "1",
                            LABEL: "AJAX call terminated with errors.",
                            COLORVALUE: "1",
                            SIZEVALUE: "1"
                        }], links: []
                    }
                })
            }, dataType: "text"
        })) : g.render(), g
    }, g.render = function (t) {
        var e;
        if (p.status.graphStarted = !0, p.status.graphRendering = !0, p.tools.triggerApexEvent(document.querySelector("#" + p.dom.containerId), "apexbeforerefresh"), t ? p.status.sampleData = !1 : t || p.status.graphReady || (p.tools.logError("Houston, we have a problem - we have to provide sample data."), p.status.sampleData = !0, t = p.data.sampleData), t) {
            if (p.status.graphReady && (p.status.graphOldPositions = g.positions()), t.constructor === Object) p.data.dataConverted = t, p.conf.debug && (p.tools.log("Data object:"), p.tools.log(p.data.dataConverted, !0)); else if (t.constructor === String) {
                if ("<" === t.trim().substr(0, 1)) try {
                    p.data.dataConverted = p.tools.xmlToJson(p.tools.parseXml(t)), null === p.data.dataConverted && (e = "Unable to convert XML string.", p.tools.logError(e), p.data.dataConverted = {
                        data: {
                            nodes: [{
                                ID: "1",
                                LABEL: "ERROR: " + e,
                                COLORVALUE: "1",
                                SIZEVALUE: "1"
                            }], links: []
                        }
                    })
                } catch (t) {
                    e = "Unable to convert XML string: " + t.message + ".", p.tools.logError(e), p.data.dataConverted = {
                        data: {
                            nodes: [{
                                ID: "1",
                                LABEL: "ERROR: " + e,
                                COLORVALUE: "1",
                                SIZEVALUE: "1"
                            }], links: []
                        }
                    }
                } else if ("{" === t.trim().substr(0, 1)) try {
                    p.data.dataConverted = JSON.parse(t)
                } catch (t) {
                    e = "Unable to parse JSON string: " + t.message + ".", p.tools.logError(e), p.data.dataConverted = {
                        data: {
                            nodes: [{
                                ID: "1",
                                LABEL: "ERROR: " + e,
                                COLORVALUE: "1",
                                SIZEVALUE: "1"
                            }], links: []
                        }
                    }
                } else e = 'Your data string is not starting with "<" or "{" - parsing not possible.', p.tools.logError(e), p.data.dataConverted = {
                    data: {
                        nodes: [{
                            ID: "1",
                            LABEL: "ERROR: " + e,
                            COLORVALUE: "1",
                            SIZEVALUE: "1"
                        }], links: []
                    }
                };
                p.conf.debug && (p.tools.log("Data string:"), p.tools.log(t, !0), p.tools.log("Converted data object:"), p.tools.log(p.data.dataConverted, !0))
            } else e = "Unable to parse your data - input data can be a XML string, JSON string or JavaScript object.", p.tools.logError(e), p.data.dataConverted = {
                data: {
                    nodes: [{
                        ID: "1",
                        LABEL: "ERROR: " + e,
                        COLORVALUE: "1",
                        SIZEVALUE: "1"
                    }], links: []
                }
            };
            null !== p.data.dataConverted ? p.data.dataConverted.hasOwnProperty("data") && null !== p.data.dataConverted.data ? (p.data.dataConverted.data.hasOwnProperty("nodes") && null !== p.data.dataConverted.data.nodes ? (p.data.nodes = p.data.dataConverted.data.nodes, 0 === p.data.nodes.length && (e = "Your data contains an empty nodes array.", p.tools.logError(e), p.data.nodes = [{
                ID: "1",
                LABEL: "ERROR: " + e,
                COLORVALUE: "1",
                SIZEVALUE: "1"
            }])) : (e = "Your data contains no nodes.", p.tools.logError(e), p.data.nodes = [{
                ID: "1",
                LABEL: "ERROR: " + e,
                COLORVALUE: "1",
                SIZEVALUE: "1"
            }]), p.data.dataConverted.data.hasOwnProperty("links") && null !== p.data.dataConverted.data.links ? p.data.links = p.data.dataConverted.data.links : p.data.links = []) : (e = "Missing root element named data.", p.tools.logError(e), p.data = {
                nodes: [{
                    ID: "1",
                    LABEL: "ERROR: " + e,
                    COLORVALUE: "1",
                    SIZEVALUE: "1"
                }], links: []
            }) : (e = "Unable to parse your data - please consult the API reference for possible data formats.", p.tools.logError(e), p.data = {
                nodes: [{
                    ID: "1",
                    LABEL: "ERROR: " + e,
                    COLORVALUE: "1",
                    SIZEVALUE: "1"
                }], links: []
            }), p.data.idLookup = [], p.data.nodes.forEach(function (t) {
                t.SIZEVALUE = parseFloat(t.SIZEVALUE), t.LABELCIRCULAR = p.tools.parseBool(t.LABELCIRCULAR), t.fixed && (t.fixed = p.tools.parseBool(t.fixed)), t.x && (t.x = parseFloat(t.x)), t.y && (t.y = parseFloat(t.y)), p.data.idLookup[t.ID] = t
            }), p.data.links.forEach(function (t) {
                t.source = p.data.idLookup[t.FROMID], t.target = p.data.idLookup[t.TOID]
            }), p.data.links = p.data.links.filter(function (t) {
                return void 0 !== t.source && void 0 !== t.target
            }), p.data.neighbors = p.data.links.map(function (t) {
                return t.FROMID + ":" + t.TOID
            }), p.data.distinctNodeColorValues = p.data.nodes.map(function (t) {
                return (t.COLORLABEL ? t.COLORLABEL : "") + ";" + t.COLORVALUE
            }).filter(function (t, e, o) {
                return o.indexOf(t) === e
            }).sort(function (t, e) {
                var o = t.toLowerCase(), n = e.toLowerCase();
                return o < n ? 1 : n < o ? -1 : 0
            }), p.data.distinctLinkColorValues = p.data.links.map(function (t) {
                return t.COLOR
            }).filter(Boolean).filter(function (t, e, o) {
                return o.indexOf(t) === e
            }).sort(function (t, e) {
                var o = t.toLowerCase(), n = e.toLowerCase();
                return o < n ? 1 : n < o ? -1 : 0
            }), p.conf.positions ? p.conf.positions.constructor === Array ? p.conf.positions.forEach(function (t) {
                void 0 !== p.data.idLookup[t.ID] && (p.data.idLookup[t.ID].fixed || (p.data.idLookup[t.ID].fixed = t.fixed), p.data.idLookup[t.ID].x || (p.data.idLookup[t.ID].x = p.data.idLookup[t.ID].px = t.x), p.data.idLookup[t.ID].y || (p.data.idLookup[t.ID].y = p.data.idLookup[t.ID].py = t.y))
            }) : p.tools.logError("Unable to set node positions: positions method parameter must be an array of node positions") : p.status.graphOldPositions && p.status.graphOldPositions.forEach(function (t) {
                void 0 !== p.data.idLookup[t.ID] && (p.data.idLookup[t.ID].fixed || (p.data.idLookup[t.ID].fixed = t.fixed), p.data.idLookup[t.ID].x || (p.data.idLookup[t.ID].x = p.data.idLookup[t.ID].px = t.x), p.data.idLookup[t.ID].y || (p.data.idLookup[t.ID].y = p.data.idLookup[t.ID].py = t.y))
            }), p.conf.positions = null, p.status.graphOldPositions = null
        }
        return p.tools.setColorFunction(), p.tools.setRadiusFunction(), p.data.nodes.forEach(function (t) {
            t.radius = p.tools.radius(t.SIZEVALUE)
        }), p.main.markers = p.dom.defs.selectAll("marker.custom").data(p.data.distinctLinkColorValues, function (t) {
            return t
        }), p.main.markers.enter().append("svg:marker").attr("id", function (t) {
            return p.dom.containerId + "_" + t
        }).attr("class", "custom").attr("stroke", "none").attr("fill", function (t) {
            return t
        }).attr("viewBox", "0 0 10 10").attr("refX", 10).attr("refY", 5).attr("markerWidth", 5).attr("markerHeight", 5).attr("orient", "auto").attr("markerUnits", "strokeWidth").append("svg:path").attr("d", "M0,0 L10,5 L0,10"), p.main.markers.exit().remove(), p.main.links = p.dom.graph.selectAll("line.link").data(p.data.links.filter(function (t) {
            return t.FROMID !== t.TOID
        }), function (t) {
            return t.FROMID + "_" + t.TOID
        }), p.main.links.enter().append("svg:line").attr("class", "link").on("mouseenter", p.tools.onLinkMouseenter).on("mouseleave", p.tools.onLinkMouseleave).on("click", p.tools.onLinkClick), p.main.links.exit().remove(), p.main.links.style("marker-end", p.tools.getMarkerUrl).classed("dotted", function (t) {
            return "dotted" === t.STYLE
        }).classed("dashed", function (t) {
            return "dashed" === t.STYLE
        }).style("stroke", function (t) {
            return t.COLOR ? t.COLOR : null
        }), p.main.selfLinks = p.dom.graph.selectAll("path.link").data(p.data.links.filter(function (t) {
            return t.FROMID === t.TOID && p.conf.showSelfLinks
        }), function (t) {
            return t.FROMID + "_" + t.TOID
        }), p.main.selfLinks.enter().append("svg:path").attr("id", function (t) {
            return p.dom.containerId + "_link_" + t.FROMID + "_" + t.TOID
        }).attr("class", "link").on("mouseenter", p.tools.onLinkMouseenter).on("mouseleave", p.tools.onLinkMouseleave).on("click", p.tools.onLinkClick), p.main.selfLinks.exit().remove(), p.main.selfLinks.attr("d", function (t) {
            return p.tools.getSelfLinkPath(t)
        }).style("marker-end", p.tools.getMarkerUrl).classed("dotted", function (t) {
            return "dotted" === t.STYLE
        }).classed("dashed", function (t) {
            return "dashed" === t.STYLE
        }).style("stroke", function (t) {
            return t.COLOR ? t.COLOR : null
        }), p.main.patterns = p.dom.defs.selectAll("pattern").data(p.data.nodes.filter(function (t) {
            return !!t.IMAGE
        }), function (t) {
            return t.ID
        }), p.main.patterns.enter().append("svg:pattern").attr("id", function (t) {
            return p.dom.containerId + "_pattern_" + t.ID
        }).append("svg:image"), p.main.patterns.exit().remove(), p.main.patterns.each(function () {
            d3.select(this).attr("x", 0).attr("y", 0).attr("height", function (t) {
                return 2 * t.radius
            }).attr("width", function (t) {
                return 2 * t.radius
            }), d3.select(this.firstChild).attr("x", 0).attr("y", 0).attr("height", function (t) {
                return 2 * t.radius
            }).attr("width", function (t) {
                return 2 * t.radius
            }).attr("xlink:href", function (t) {
                return t.IMAGE
            })
        }), p.main.nodes = p.dom.graph.selectAll("circle.node").data(p.data.nodes, function (t) {
            return t.ID
        }), p.main.nodes.enter().append("svg:circle").attr("class", "node").attr("cx", function (t) {
            if (!t.fixed && !t.x) return t.x = Math.floor(Math.random() * p.tools.getGraphWidth() + 1), t.x
        }).attr("cy", function (t) {
            if (!t.fixed && !t.y) return t.y = Math.floor(Math.random() * p.conf.height + 1), t.y
        }).on("mouseenter", p.tools.onNodeMouseenter).on("mouseleave", p.tools.onNodeMouseleave).on("click", p.tools.onNodeClick).on("dblclick", p.tools.onNodeDblclick).on("contextmenu", p.tools.onNodeContextmenu), p.main.nodes.exit().remove(), p.main.nodes.attr("r", function (t) {
            return t.radius
        }).attr("fill", function (t) {
            return t.IMAGE ? "url(#" + p.dom.containerId + "_pattern_" + t.ID + ")" : p.tools.color(t.COLORVALUE)
        }), p.conf.showLabels ? (p.main.labels = p.dom.graph.selectAll("text.label").data(p.data.nodes.filter(function (t) {
            return !t.LABELCIRCULAR && !p.conf.labelsCircular
        }), function (t) {
            return t.ID
        }), p.main.labels.enter().append("svg:text").attr("class", "label"), p.main.labels.exit().remove(), p.main.labels.text(function (t) {
            return t.LABEL
        }), p.main.labelPaths = p.dom.defs.selectAll("path.label").data(p.data.nodes.filter(function (t) {
            return t.LABELCIRCULAR || p.conf.labelsCircular
        }), function (t) {
            return t.ID
        }), p.main.labelPaths.enter().append("svg:path").attr("id", function (t) {
            return p.dom.containerId + "_textPath_" + t.ID
        }).attr("class", "label"), p.main.labelPaths.exit().remove(), p.main.labelPaths.attr("d", function (t) {
            return p.tools.getLabelPath(t)
        }), p.main.labelsCircular = p.dom.graph.selectAll("text.labelCircular").data(p.data.nodes.filter(function (t) {
            return t.LABELCIRCULAR || p.conf.labelsCircular
        }), function (t) {
            return t.ID
        }), p.main.labelsCircular.enter().append("svg:text").attr("class", "labelCircular").append("svg:textPath").attr("xlink:href", function (t) {
            return "#" + p.dom.containerId + "_textPath_" + t.ID
        }), p.main.labelsCircular.exit().remove(), p.main.labelsCircular.each(function (t) {
            d3.select(this.firstChild).text(t.LABEL)
        })) : (p.dom.defs.selectAll("path.label").remove(), p.dom.graph.selectAll("text.label,text.labelCircular").remove()), p.status.aspectRatio || (p.status.aspectRatio = p.conf.width / p.conf.height), p.tools.removeLegend(), p.conf.showLegend && p.tools.createLegend(), p.tools.executeResize(), g.debug(p.conf.debug).showBorder(p.conf.showBorder).setDomParentPaddingToZero(p.conf.setDomParentPaddingToZero).useDomParentWidth(p.conf.useDomParentWidth).alignFixedNodesToGrid(p.conf.alignFixedNodesToGrid).wrapLabels(p.conf.wrapLabels).dragMode(p.conf.dragMode).pinMode(p.conf.pinMode).lassoMode(p.conf.lassoMode).zoomMode(p.conf.zoomMode).transform(p.conf.transform).autoRefresh(p.conf.autoRefresh).linkDistance(p.conf.linkDistance).charge(p.conf.charge).chargeDistance(p.conf.chargeDistance).gravity(p.conf.gravity).linkStrength(p.conf.linkStrength).friction(p.conf.friction).theta(p.conf.theta), p.main.force.nodes(p.data.nodes).links(p.data.links).size([p.tools.getGraphWidth(), p.tools.getGraphHeight()]).start(), p.status.graphReady = !0, p.status.graphRendering = !1, p.status.customize ? p.tools.createCustomizeWizard() : p.tools.createCustomizeLink(), p.tools.log("Event renderend triggered."), p.tools.triggerApexEvent(document.querySelector("#" + p.dom.containerId), "net_gobrechts_d3_force_renderend"), "function" == typeof p.conf.onRenderEndFunction && p.conf.onRenderEndFunction.call(p.dom.svg), p.tools.triggerApexEvent(document.querySelector("#" + p.dom.containerId), "apexafterrefresh"), g
    }, g.resume = function () {
        return p.status.graphReady && p.main.force.resume(), p.tools.createCustomizeWizardIfNotRendering(), g
    }, g.showBorder = function (t) {
        return arguments.length ? (p.conf.showBorder = t, p.status.graphStarted && (p.dom.svg.classed("border", p.conf.showBorder), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.showBorder
    }, g.showLegend = function (t) {
        return arguments.length ? (p.conf.showLegend = t, p.status.graphStarted && (p.conf.showLegend ? (p.tools.removeLegend(), p.tools.createLegend()) : p.tools.removeLegend(), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.showLegend
    }, g.showSelfLinks = function (t) {
        return arguments.length ? (p.conf.showSelfLinks = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.showSelfLinks
    }, g.showLinkDirection = function (t) {
        return arguments.length ? (p.conf.showLinkDirection = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.showLinkDirection
    }, g.showTooltips = function (t) {
        return arguments.length ? (p.conf.showTooltips = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.showTooltips
    }, g.tooltipPosition = function (t) {
        return arguments.length ? (p.conf.tooltipPosition = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.tooltipPosition
    }, g.colorScheme = function (t) {
        return arguments.length ? (p.conf.colorScheme = t, p.tools.setColorFunction(), p.status.graphStarted && (p.main.nodes.attr("fill", function (t) {
            return t.IMAGE ? "url(#" + p.dom.containerId + "_pattern_" + t.ID + ")" : p.tools.color(t.COLORVALUE)
        }), p.conf.showLegend && (p.tools.removeLegend(), p.tools.createLegend()), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.colorScheme
    }, g.showLabels = function (t) {
        return arguments.length ? (p.conf.showLabels = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.showLabels
    }, g.wrapLabels = function (t) {
        return arguments.length ? (p.conf.wrapLabels = t, p.conf.wrapLabels && (p.status.wrapLabelsOnNextTick = !0), p.status.graphStarted && (p.main.labels.attr("lines", null), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.wrapLabels
    }, g.labelSplitCharacter = function (t) {
        return arguments.length ? (p.conf.labelSplitCharacter = t, p.conf.wrapLabels && (p.status.wrapLabelsOnNextTick = !0), p.status.graphStarted && (p.main.labels.attr("lines", null), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.labelSplitCharacter
    }, g.wrappedLabelWidth = function (t) {
        return arguments.length ? (p.conf.wrappedLabelWidth = t, p.conf.wrapLabels && (p.main.labels.attr("lines", null), p.status.wrapLabelsOnNextTick = !0), p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.wrappedLabelWidth
    }, g.wrappedLabelLineHeight = function (t) {
        return arguments.length ? (p.conf.wrappedLabelLineHeight = t, p.conf.wrapLabels && (p.status.wrapLabelsOnNextTick = !0), p.status.graphStarted && (p.main.labels.attr("lines", null), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.wrappedLabelLineHeight
    }, g.labelsCircular = function (t) {
        return arguments.length ? (p.conf.labelsCircular = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.labelsCircular
    }, g.labelDistance = function (t) {
        return arguments.length ? (p.conf.labelDistance = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.labelDistance
    }, g.preventLabelOverlappingOnForceEnd = function (t) {
        return arguments.length ? (p.conf.preventLabelOverlappingOnForceEnd = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.preventLabelOverlappingOnForceEnd
    }, g.labelPlacementIterations = function (t) {
        return arguments.length ? (p.conf.labelPlacementIterations = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.labelPlacementIterations
    }, g.dragMode = function (t) {
        return arguments.length ? (p.conf.dragMode = t, p.status.graphStarted && (p.conf.dragMode ? p.main.nodes.call(p.main.drag) : (p.main.nodes.on("mousedown.drag", null), p.main.nodes.on("touchstart.drag", null)), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.dragMode
    }, g.pinMode = function (t) {
        return arguments.length ? (p.conf.pinMode = t, p.status.graphStarted && (p.conf.pinMode ? p.main.drag.on("dragstart", function (t) {
            d3.select(this).classed("fixed", t.fixed = 1)
        }) : p.main.drag.on("dragstart", null), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.pinMode
    }, g.lassoMode = function (t) {
        return arguments.length ? (p.conf.lassoMode = t, p.status.graphStarted && (p.conf.lassoMode ? (p.dom.graphOverlay.call(p.main.lasso), p.main.lasso.items(p.main.nodes), p.main.lasso.on("start", function () {
            p.main.lasso.items().classed("selected", !1), p.tools.onLassoStart(p.main.lasso.items())
        }), p.main.lasso.on("draw", function () {
            p.main.lasso.items().filter(function (t) {
                return !0 === t.possible
            }).classed("selected", !0), p.main.lasso.items().filter(function (t) {
                return !1 === t.possible
            }).classed("selected", !1)
        }), p.main.lasso.on("end", function () {
            p.main.lasso.items().filter(function (t) {
                return !0 === t.selected
            }).classed("selected", !0), p.main.lasso.items().filter(function (t) {
                return !1 === t.selected
            }).classed("selected", !1), p.tools.onLassoEnd(p.main.lasso.items())
        }), p.events.mousedownLasso = p.dom.graphOverlay.on("mousedown.drag"), p.events.touchstartLasso = p.dom.graphOverlay.on("touchstart.drag"), p.dom.graphOverlay.on("mousedown.drag", p.tools.lassoEventProxy(p.events.mousedownLasso)), p.dom.graphOverlay.on("touchstart.drag", p.tools.lassoEventProxy(p.events.touchstartLasso))) : (p.dom.graphOverlay.on(".drag", null), p.main.nodes.classed("selected", !1)), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.lassoMode
    }, g.zoomMode = function (t) {
        return arguments.length ? (p.conf.zoomMode = t, p.status.graphStarted && (p.conf.zoomMode ? (p.main.zoom.scaleExtent([p.conf.minZoomFactor, p.conf.maxZoomFactor]).size([p.tools.getGraphWidth(), p.tools.getGraphHeight()]).on("zoom", p.main.zoomed), p.dom.graphOverlay.call(p.main.zoom), p.events.dblclickZoom = p.dom.graphOverlay.on("dblclick.zoom"), p.events.mousedownZoom = p.dom.graphOverlay.on("mousedown.zoom"), p.events.touchstartZoom = p.dom.graphOverlay.on("touchstart.zoom"), p.dom.graphOverlay.on("dblclick.zoom", p.tools.zoomEventProxy(p.events.dblclickZoom)), p.dom.graphOverlay.on("mousedown.zoom", p.tools.zoomEventProxy(p.events.mousedownZoom)), p.dom.graphOverlay.on("touchstart.zoom", p.tools.zoomEventProxy(p.events.touchstartZoom)), JSON.stringify(p.conf.transform) !== JSON.stringify(p.confDefaults.transform) && (p.dom.graph.attr("transform", "translate(" + p.main.zoom.translate() + ")scale(" + p.main.zoom.scale() + ")"), p.tools.writeConfObjectIntoWizard())) : p.dom.graphOverlay.on(".zoom", null), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.zoomMode
    }, g.minZoomFactor = function (t) {
        return arguments.length ? (p.conf.minZoomFactor = t, p.status.graphReady && g.zoomMode(p.conf.zoomMode), g) : p.conf.minZoomFactor
    }, g.maxZoomFactor = function (t) {
        return arguments.length ? (p.conf.maxZoomFactor = t, p.status.graphReady && g.zoomMode(p.conf.zoomMode), g) : p.conf.maxZoomFactor
    }, g.zoom = function (t, e, o, n) {
        var a, s, r, i = p.tools.getGraphWidth(), l = p.tools.getGraphHeight();
        return t = isNaN(t) ? i / 2 : parseInt(t), e = isNaN(e) ? l / 2 : parseInt(e), o = isNaN(o) ? i : parseInt(o), n = isNaN(n) ? 500 : parseInt(n), a = i / 2 - t * (r = i / o), s = l / 2 - e * r, p.main.interpolateZoom([a, s], r, n), g
    }, g.zoomSmooth = function (t, e, o, n) {
        return t = isNaN(t) ? width / 2 : parseInt(t), e = isNaN(e) ? height / 2 : parseInt(e), o = isNaN(o) ? width : parseInt(o), n = isNaN(n) ? 1500 : parseInt(n), g.zoom(t, e, o, n), g
    }, g.transform = function (t, e) {
        return arguments.length ? (p.main.interpolateZoom(t.translate, t.scale, isNaN(e) ? 500 : parseInt(e)), g) : {
            translate: p.main.zoom.translate(),
            scale: p.main.zoom.scale()
        }
    }, g.center = function (t) {
        var e, o, n, a, s = {};
        return t = isNaN(t) ? 500 : parseInt(t), s.width = p.tools.getGraphWidth(), s.height = p.tools.getGraphHeight(), e = p.dom.graph.node().getBBox(), a = p.main.zoom.scale(), o = (s.width - e.width * a) / 2 - e.x * a, n = (s.height - e.height * a) / 2 - e.y * a, p.main.interpolateZoom([o, n], a, t), g
    }, g.zoomToFit = function (t) {
        var e, o, n, a, s = {};
        return t = isNaN(t) ? 500 : parseInt(t), s.width = p.tools.getGraphWidth(), s.height = p.tools.getGraphHeight(), 0 < (e = p.dom.graph.node().getBBox()).width && 0 < e.height && (a = Math.min((s.height - 20) / e.height, (s.width - 20) / e.width), o = (s.width - e.width * a) / 2 - e.x * a, n = (s.height - e.height * a) / 2 - e.y * a, p.main.interpolateZoom([o, n], a, t)), g
    }, g.zoomToFitOnForceEnd = function (t) {
        return arguments.length ? (p.conf.zoomToFitOnForceEnd = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.zoomToFitOnForceEnd
    }, g.zoomToFitOnResize = function (t) {
        return arguments.length ? (p.conf.zoomToFitOnResize = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.zoomToFitOnResize
    }, g.keepAspectRatioOnResize = function (t) {
        return arguments.length ? (p.conf.keepAspectRatioOnResize = t, p.status.graphStarted && (g.width(p.conf.width), g.height(p.conf.height), p.tools.removeLegend(), p.tools.createLegend(), p.tools.executeResize(), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.keepAspectRatioOnResize
    }, g.onResizeFunction = function (t) {
        return arguments.length ? (p.conf.onResizeFunction = t, g) : p.conf.onResizeFunction
    }, g.onResizeFunctionTimeout = function (t) {
        return arguments.length ? (p.conf.onResizeFunctionTimeout = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.onResizeFunctionTimeout
    }, g.showLoadingIndicatorOnAjaxCall = function (t) {
        return arguments.length ? (p.conf.showLoadingIndicatorOnAjaxCall = t, g) : p.conf.showLoadingIndicatorOnAjaxCall
    }, g.showLoadingIndicator = function (t) {
        return p.tools.parseBool(t) ? p.dom.loading.style("display", "block") : p.dom.loading.style("display", "none"), g
    }, g.alignFixedNodesToGrid = function (t) {
        var e, o;
        return arguments.length ? (p.conf.alignFixedNodesToGrid = t, p.status.graphStarted && (e = p.tools.getGraphWidth(), o = p.tools.getGraphHeight(), p.conf.alignFixedNodesToGrid ? (p.status.graphReady && p.main.nodes.each(function (t) {
            t.fixed && (t.x = t.px = p.tools.getNearestGridPosition(t.x, e), t.y = t.py = p.tools.getNearestGridPosition(t.y, o))
        }), p.main.drag.on("dragend", function (t) {
            t.x = t.px = p.tools.getNearestGridPosition(t.x, e), t.y = t.py = p.tools.getNearestGridPosition(t.y, o)
        })) : p.main.drag.on("dragend", null), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.alignFixedNodesToGrid
    }, g.gridSize = function (t) {
        return arguments.length ? (p.conf.gridSize = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.gridSize
    }, g.moveFixedNodes = function (e, o) {
        return p.status.graphStarted && (e || (e = 0), o || (o = 0), 0 === e && 0 === o || p.main.nodes.each(function (t) {
            t.fixed && (t.x = t.px = p.conf.alignFixedNodesToGrid ? p.tools.getNearestGridPosition(t.x + e, p.conf.width) : t.x + e, t.y = t.py = p.conf.alignFixedNodesToGrid ? p.tools.getNearestGridPosition(t.y + o, p.conf.width) : t.y + o)
        })), g
    },g.releaseFixedNodes = function () {
        return p.status.graphStarted && p.main.nodes.each(function (t) {
            t.fixed = 0
        }), g
    },g.nodeEventToStopPinMode = function (t) {
        return arguments.length ? (p.conf.nodeEventToStopPinMode = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.nodeEventToStopPinMode
    },g.onNodeContextmenuPreventDefault = function (t) {
        return arguments.length ? (p.conf.onNodeContextmenuPreventDefault = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.onNodeContextmenuPreventDefault
    },g.nodeEventToOpenLink = function (t) {
        return arguments.length ? (p.conf.nodeEventToOpenLink = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.nodeEventToOpenLink
    },g.nodeLinkTarget = function (t) {
        return arguments.length ? (p.conf.nodeLinkTarget = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.nodeLinkTarget
    },g.autoRefresh = function (t) {
        return arguments.length ? (p.conf.autoRefresh = t, p.status.graphStarted && (p.conf.autoRefresh && p.conf.refreshInterval && !p.conf.interval ? (p.conf.interval = window.setInterval(function () {
            g.start()
        }, p.conf.refreshInterval), p.tools.log("Auto refresh started with an interval of " + p.conf.refreshInterval + " milliseconds.")) : !p.conf.autoRefresh && p.conf.interval && (clearInterval(p.conf.interval), p.conf.interval = null, p.tools.log("Auto refresh stopped.")), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.autoRefresh
    },g.refreshInterval = function (t) {
        return arguments.length ? (p.conf.refreshInterval = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.refreshInterval
    },g.useDomParentWidth = function (t) {
        return arguments.length ? (p.conf.useDomParentWidth = t, p.status.graphStarted && (p.conf.useDomParentWidth ? p.tools.ResizeObserver.observe(p.dom.svgParent.node()) : p.tools.ResizeObserver.unobserve(p.dom.svgParent.node()), p.conf.showLegend && (p.tools.removeLegend(), p.tools.createLegend()), p.tools.executeResize()), g) : p.conf.useDomParentWidth
    },g.setDomParentPaddingToZero = function (t) {
        return arguments.length ? (p.conf.setDomParentPaddingToZero = t, p.status.graphStarted && (p.conf.setDomParentPaddingToZero ? p.dom.svgParent.style("padding", "0") : p.dom.svgParent.style("padding", null), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.setDomParentPaddingToZero
    },g.domParentWidth = function () {
        return p.tools.getSvgParentInnerWidth()
    },g.width = function (t) {
        return arguments.length ? (p.conf.width = t, p.status.graphStarted && (p.conf.keepAspectRatioOnResize && (p.conf.height = 1 * p.conf.width / p.status.aspectRatio), p.tools.executeResize(), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.width
    },g.height = function (t) {
        return arguments.length ? (p.conf.height = t, p.status.graphStarted && (p.conf.keepAspectRatioOnResize && (p.conf.width = p.conf.height * p.status.aspectRatio), p.tools.executeResize(), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.height
    },g.minNodeRadius = function (t) {
        return arguments.length ? (p.conf.minNodeRadius = t, p.status.graphReady && (p.tools.setRadiusFunction(), p.main.nodes.each(function (t) {
            t.radius = p.tools.radius(t.SIZEVALUE)
        }), p.main.nodes.attr("r", function (t) {
            return t.radius
        }), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.minNodeRadius
    },g.maxNodeRadius = function (t) {
        return arguments.length ? (p.conf.maxNodeRadius = t, p.status.graphReady && (p.tools.setRadiusFunction(), p.main.nodes.each(function (t) {
            t.radius = p.tools.radius(t.SIZEVALUE)
        }), p.main.nodes.attr("r", function (t) {
            return t.radius
        }), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.maxNodeRadius
    },g.selfLinkDistance = function (t) {
        return arguments.length ? (p.conf.selfLinkDistance = t, p.status.graphStarted && p.tools.createCustomizeWizardIfNotRendering(), g) : p.conf.selfLinkDistance
    },g.linkDistance = function (t) {
        return arguments.length ? (p.conf.linkDistance = t, p.status.graphStarted && (p.main.force.linkDistance(p.conf.linkDistance), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.linkDistance
    },g.charge = function (t) {
        return arguments.length ? (p.conf.charge = t, p.status.graphStarted && (p.main.force.charge(p.conf.charge), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.charge
    },g.chargeDistance = function (t) {
        return arguments.length ? (p.conf.chargeDistance = t, p.status.graphStarted && (p.main.force.chargeDistance(p.conf.chargeDistance), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.chargeDistance
    },g.gravity = function (t) {
        return arguments.length ? (p.conf.gravity = t, p.status.graphStarted && (p.main.force.gravity(p.conf.gravity), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.gravity
    },g.linkStrength = function (t) {
        return arguments.length ? (p.conf.linkStrength = t, p.status.graphStarted && (p.main.force.linkStrength(p.conf.linkStrength), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.linkStrength
    },g.friction = function (t) {
        return arguments.length ? (p.conf.friction = t, p.status.graphStarted && (p.main.force.friction(p.conf.friction), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.friction
    },g.theta = function (t) {
        return arguments.length ? (p.conf.theta = t, p.status.graphStarted && (p.main.force.theta(p.conf.theta), p.tools.createCustomizeWizardIfNotRendering()), g) : p.conf.theta
    },g.positions = function (t) {
        if (arguments.length) return p.status.graphReady ? t.constructor === Array ? t.forEach(function (t) {
            void 0 !== p.data.idLookup[t.ID] && (p.data.idLookup[t.ID].fixed = p.tools.parseBool(t.fixed), p.data.idLookup[t.ID].x = p.data.idLookup[t.ID].px = t.x, p.data.idLookup[t.ID].y = p.data.idLookup[t.ID].py = t.y)
        }) : p.tools.logError("Unable to set node positions: positions method parameter must be an array of node positions") : p.conf.positions = t, g;
        var e = [];
        return p.data.nodes.forEach(function (t) {
            e.push({ID: t.ID, x: Math.round(t.x), y: Math.round(t.y), fixed: t.fixed ? 1 : 0})
        }), e
    },g.onLinkClickFunction = function (t) {
        return arguments.length ? (p.conf.onLinkClickFunction = t, g) : p.conf.onLinkClickFunction
    },g.onNodeMouseenterFunction = function (t) {
        return arguments.length ? (p.conf.onNodeMouseenterFunction = t, g) : p.conf.onNodeMouseenterFunction
    },g.onNodeMouseleaveFunction = function (t) {
        return arguments.length ? (p.conf.onNodeMouseleaveFunction = t, g) : p.conf.onNodeMouseleaveFunction
    },g.onNodeClickFunction = function (t) {
        return arguments.length ? (p.conf.onNodeClickFunction = t, g) : p.conf.onNodeClickFunction
    },g.onNodeDblclickFunction = function (t) {
        return arguments.length ? (p.conf.onNodeDblclickFunction = t, g) : p.conf.onNodeDblclickFunction
    },g.onNodeContextmenuFunction = function (t) {
        return arguments.length ? (p.conf.onNodeContextmenuFunction = t, g) : p.conf.onNodeContextmenuFunction
    },g.onLassoStartFunction = function (t) {
        return arguments.length ? (p.conf.onLassoStartFunction = t, g) : p.conf.onLassoStartFunction
    },g.onLassoEndFunction = function (t) {
        return arguments.length ? (p.conf.onLassoEndFunction = t, g) : p.conf.onLassoEndFunction
    },g.onRenderEndFunction = function (t) {
        return arguments.length ? (p.conf.onRenderEndFunction = t, g) : p.conf.onRenderEndFunction
    },g.onForceStartFunction = function (t) {
        return arguments.length ? (p.conf.onForceStartFunction = t, g) : p.conf.onForceStartFunction
    },g.onForceEndFunction = function (t) {
        return arguments.length ? (p.conf.onForceEndFunction = t, g) : p.conf.onForceEndFunction
    },g.sampleData = function (t) {
        return arguments.length ? (p.data.sampleData = t, g) : p.data.sampleData
    },g.nodes = function () {
        return p.main.nodes
    },g.links = function () {
        return p.main.links
    },g.selfLinks = function () {
        return p.main.selfLinks
    },g.data = function () {
        return p.data.dataConverted
    },g.nodeDataById = function (t) {
        return p.data.idLookup[t]
    },g.options = function (t) {
        var e;
        if (arguments.length) return p.tools.applyConfigurationObject(t), g;
        var o = {};
        for (e in p.conf) p.conf.hasOwnProperty(e) && (p.confDefaults.hasOwnProperty(e) ? "bool" !== p.confDefaults[e].type && "number" !== p.confDefaults[e].type && "text" !== p.confDefaults[e].type || p.confDefaults[e].val === p.conf[e] ? "object" === p.confDefaults[e].type && JSON.stringify(p.confDefaults[e].val) !== JSON.stringify(p.conf[e]) && (o[e] = p.conf[e]) : o[e] = p.conf[e] : p.confDefaults.hasOwnProperty(e) || void 0 === p.conf[e] || null === p.conf[e] || (o[e] = p.conf[e]));
        return o
    },g.optionsCustomizationWizard = function (t) {
        var e;
        if (arguments.length) return p.tools.applyConfigurationObject(t), g;
        var o = {};
        for (e in p.confDefaults) p.confDefaults.hasOwnProperty(e) && ("bool" !== p.confDefaults[e].type && "number" !== p.confDefaults[e].type && "text" !== p.confDefaults[e].type || p.confDefaults[e].val === p.conf[e] ? "object" === p.confDefaults[e].type && JSON.stringify(p.confDefaults[e].val) !== JSON.stringify(p.conf[e]) && (o[e] = p.conf[e]) : o[e] = p.conf[e]);
        return o
    },g.customize = function (t) {
        return arguments.length ? (p.status.customize = t, p.status.graphStarted && (p.status.customize ? (p.tools.createCustomizeWizard(), p.tools.removeCustomizeLink()) : (p.tools.removeCustomizeWizard(), p.conf.debug && p.tools.createCustomizeLink())), g) : p.status.customize
    },g.debug = function (t) {
        return arguments.length ? (p.conf.debug = t, p.status.graphStarted && (p.conf.debug ? p.tools.createCustomizeLink() : p.tools.removeCustomizeLink()), g) : p.conf.debug
    },g.userAgent = function () {
        return p.status.userAgent
    },g.inspect = function () {
        return p
    },g.version = function () {
        return p.version
    },p.main.init(),p.status.apexPluginId && apex.jQuery("#" + p.dom.containerId).bind("apexrefresh", function () {
        g.start()
    }),g




}